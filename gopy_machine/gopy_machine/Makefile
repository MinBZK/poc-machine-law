# Makefile for python interface for package gopy_machine.
# File is generated by gopy. Do not edit.
# gopy build -vm=python3 -output=gopy_machine/tmp -name=gopy_machine github.com/minbzk/poc-machine-law/machinev2/service

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=/home/chiel/projects/github.com/minbzk/poc-machine-law/.venv/bin/python3
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = "-I/home/chiel/.local/share/uv/python/cpython-3.13.0-linux-x86_64-gnu/include/python3.13"
LDFLAGS = "-L/nix/store/6llg9sms6xw69whqpdkgldjz61dlk9c2-python3-3.13.1/lib" "-lpython3.13" -ldl -L/nix/store/sbc37bmgpzr7wvlbm9lgf4y6q6dyz40q-libxcrypt-4.4.36/lib -lm

all: gen build

gen:
	gopy gen -no-make -vm=python3 -name=gopy_machine github.com/minbzk/poc-machine-law/machinev2/service

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm gopy_machine.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w gopy_machine.go
	# generate gopy_machine_go$(LIBEXT) from gopy_machine.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o gopy_machine_go$(LIBEXT) gopy_machine.go
	# use pybindgen to build the gopy_machine.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _gopy_machine$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated gopy_machine.py python wrapper imports this c-code package

	$(GCC) gopy_machine.c  gopy_machine_go$(LIBEXT) -o _gopy_machine$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w

