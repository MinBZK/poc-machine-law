/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/minbzk/poc-machine-law/machinev2/gopy_machine */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "service.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: uuid.UUID ---
//
extern long long int uuid_UUID_CTor();
extern GoInt uuid_UUID_len(long long int handle);
extern char uuid_UUID_elem(long long int handle, GoInt _idx);
extern void uuid_UUID_set(long long int handle, GoInt _idx, char _vl);

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);
extern long long int Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long int handle);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: []*casemanager.Case ---
//
extern long long int Slice_Ptr_casemanager_Case_CTor();
extern GoInt Slice_Ptr_casemanager_Case_len(long long int handle);
extern long long int Slice_Ptr_casemanager_Case_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_casemanager_Case_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_casemanager_Case_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_casemanager_Case_append(long long int handle, long long int _vl);

// --- wrapping slice: []*model.Claim ---
//
extern long long int Slice_Ptr_model_Claim_CTor();
extern GoInt Slice_Ptr_model_Claim_len(long long int handle);
extern long long int Slice_Ptr_model_Claim_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_model_Claim_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_model_Claim_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_model_Claim_append(long long int handle, long long int _vl);

// --- wrapping slice: []*model.Event ---
//
extern long long int Slice_Ptr_model_Event_CTor();
extern GoInt Slice_Ptr_model_Event_len(long long int handle);
extern long long int Slice_Ptr_model_Event_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_model_Event_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_model_Event_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_model_Event_append(long long int handle, long long int _vl);

// --- wrapping slice: []*model.PathNode ---
//
extern long long int Slice_Ptr_model_PathNode_CTor();
extern GoInt Slice_Ptr_model_PathNode_len(long long int handle);
extern long long int Slice_Ptr_model_PathNode_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_model_PathNode_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_model_PathNode_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_model_PathNode_append(long long int handle, long long int _vl);

// --- wrapping slice: []*utils.RuleSpec ---
//
extern long long int Slice_Ptr_utils_RuleSpec_CTor();
extern GoInt Slice_Ptr_utils_RuleSpec_len(long long int handle);
extern long long int Slice_Ptr_utils_RuleSpec_elem(long long int handle, GoInt _idx);
extern long long int Slice_Ptr_utils_RuleSpec_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_utils_RuleSpec_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Ptr_utils_RuleSpec_append(long long int handle, long long int _vl);

// --- wrapping slice: []map[string]any ---
//
extern long long int Slice_Map_string_any_CTor();
extern GoInt Slice_Map_string_any_len(long long int handle);
extern long long int Slice_Map_string_any_elem(long long int handle, GoInt _idx);
extern long long int Slice_Map_string_any_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Map_string_any_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Map_string_any_append(long long int handle, long long int _vl);

// --- wrapping map: map[string]*model.Claim ---
//
extern long long int Map_string_Ptr_model_Claim_CTor();
extern GoInt Map_string_Ptr_model_Claim_len(long long int handle);
extern long long int Map_string_Ptr_model_Claim_elem(long long int handle, char* _ky);
extern char Map_string_Ptr_model_Claim_contains(long long int handle, char* _ky);
extern void Map_string_Ptr_model_Claim_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_Ptr_model_Claim_delete(long long int handle, char* _ky);
extern long long int Map_string_Ptr_model_Claim_keys(long long int handle);

// --- wrapping map: map[string][]string ---
//
extern long long int Map_string_Slice_string_CTor();
extern GoInt Map_string_Slice_string_len(long long int handle);
extern long long int Map_string_Slice_string_elem(long long int handle, char* _ky);
extern char Map_string_Slice_string_contains(long long int handle, char* _ky);
extern void Map_string_Slice_string_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_Slice_string_delete(long long int handle, char* _ky);
extern long long int Map_string_Slice_string_keys(long long int handle);

// --- wrapping map: map[string]any ---
//
extern long long int Map_string_any_CTor();
extern GoInt Map_string_any_len(long long int handle);
extern long long int Map_string_any_elem(long long int handle, char* _ky);
extern char Map_string_any_contains(long long int handle, char* _ky);
extern void Map_string_any_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_any_delete(long long int handle, char* _ky);
extern long long int Map_string_any_keys(long long int handle);

// --- wrapping map: map[string]model.DataFrame ---
//
extern long long int Map_string_model_DataFrame_CTor();
extern GoInt Map_string_model_DataFrame_len(long long int handle);
extern long long int Map_string_model_DataFrame_elem(long long int handle, char* _ky);
extern char Map_string_model_DataFrame_contains(long long int handle, char* _ky);
extern void Map_string_model_DataFrame_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_model_DataFrame_delete(long long int handle, char* _ky);
extern long long int Map_string_model_DataFrame_keys(long long int handle);

// --- wrapping map: map[string]map[string]any ---
//
extern long long int Map_string_Map_string_any_CTor();
extern GoInt Map_string_Map_string_any_len(long long int handle);
extern long long int Map_string_Map_string_any_elem(long long int handle, char* _ky);
extern char Map_string_Map_string_any_contains(long long int handle, char* _ky);
extern void Map_string_Map_string_any_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_Map_string_any_delete(long long int handle, char* _ky);
extern long long int Map_string_Map_string_any_keys(long long int handle);

// --- wrapping struct: service.RuleService ---
//
extern long long int service_RuleService_CTor();
extern char* service_RuleService_ServiceName_Get(long long int handle);
extern void service_RuleService_ServiceName_Set(long long int handle, char* val);
extern long long int service_RuleService_Services_Get(long long int handle);
extern void service_RuleService_Services_Set(long long int handle, long long int val);
extern long long int service_RuleService_Resolver_Get(long long int handle);
extern void service_RuleService_Resolver_Set(long long int handle, long long int val);
extern long long int service_RuleService_SourceDataFrames_Get(long long int handle);
extern void service_RuleService_SourceDataFrames_Set(long long int handle, long long int val);
extern long long int service_RuleService_GetResolver(long long int _handle);
extern long long int service_RuleService_Evaluate(long long int _handle, long long int ctx, char* law, char* referenceDate, long long int parameters, long long int overwriteInput, char* requestedOutput, char approved);
extern long long int service_RuleService_GetRuleInfo(long long int _handle, char* law, char* referenceDate);
extern void service_RuleService_SetSourceDataFrame(long long int _handle, char* table, long long int df, char goRun);

// --- wrapping struct: service.Services ---
//
extern long long int service_Services_CTor();
extern long long int service_Services_Resolver_Get(long long int handle);
extern void service_Services_Resolver_Set(long long int handle, long long int val);
extern char* service_Services_RootReferenceDate_Get(long long int handle);
extern void service_Services_RootReferenceDate_Set(long long int handle, char* val);
extern long long int service_Services_CaseManager_Get(long long int handle);
extern void service_Services_CaseManager_Set(long long int handle, long long int val);
extern long long int service_Services_ClaimManager_Get(long long int handle);
extern void service_Services_ClaimManager_Set(long long int handle, long long int val);
extern long long int service_Services_GetDiscoverableServiceLaws(long long int _handle);
extern void service_Services_SetSourceDataFrame(long long int _handle, char* svc, char* table, long long int df, char goRun);
extern long long int service_Services_GetResolver(long long int _handle);
extern long long int service_Services_GetCaseManager(long long int _handle);
extern long long int service_Services_GetClaimManager(long long int _handle);
extern long long int service_Services_Evaluate(long long int _handle, long long int ctx, char* svc, char* law, long long int parameters, char* referenceDate, long long int overwriteInput, char* requestedOutput, char approved);
extern long long int service_Services_ExtractValueTree(long long int _handle, long long int root);
extern char* service_Services_ApplyRules(long long int _handle, long long int ctx, long long int event);

// --- wrapping struct: service.CaseManager ---
//
extern long long int service_CaseManager_CTor();
extern long long int service_CaseManager_Services_Get(long long int handle);
extern void service_CaseManager_Services_Set(long long int handle, long long int val);
extern double service_CaseManager_SampleRate_Get(long long int handle);
extern void service_CaseManager_SampleRate_Set(long long int handle, double val);
extern void service_CaseManager_SetCase(long long int _handle, long long int caseID, char* key, char goRun);
extern long long int service_CaseManager_SubmitCase(long long int _handle, long long int ctx, char* bsn, char* serviceType, char* law, long long int parameters, long long int claimedResult, char approvedClaimsOnly);
extern char* service_CaseManager_CompleteManualReview(long long int _handle, long long int ctx, long long int caseID, char* verifierID, char approved, char* reason, long long int overrideResult);
extern char* service_CaseManager_ObjectCase(long long int _handle, long long int ctx, long long int caseID, char* reason);
extern char service_CaseManager_CanAppeal(long long int _handle, long long int caseID);
extern char service_CaseManager_CanObject(long long int _handle, long long int caseID);
extern long long int service_CaseManager_GetCase(long long int _handle, char* bsn, char* serviceType, char* law);
extern long long int service_CaseManager_GetCaseByID(long long int _handle, long long int ctx, long long int id);
extern long long int service_CaseManager_GetCasesByStatus(long long int _handle, char* serviceType, char* status);
extern long long int service_CaseManager_GetCasesByLaw(long long int _handle, char* law, char* serviceType);
extern long long int service_CaseManager_GetEventsByUUID(long long int _handle, long long int caseID);
extern long long int service_CaseManager_GetEvents(long long int _handle, long long int caseID);
extern char* service_CaseManager_Save(long long int _handle, long long int ctx, long long int c);
extern void service_CaseManager_Wait(long long int _handle, char goRun);
extern void service_CaseManager_Close(long long int _handle, char goRun);

// --- wrapping struct: service.ClaimManager ---
//
extern long long int service_ClaimManager_CTor();
extern long long int service_ClaimManager_Services_Get(long long int handle);
extern void service_ClaimManager_Services_Set(long long int handle, long long int val);
extern long long int service_ClaimManager_CaseManager_Get(long long int handle);
extern void service_ClaimManager_CaseManager_Set(long long int handle, long long int val);
extern char* service_ClaimManager_SubmitClaim(long long int _handle, long long int ctx, char* svc, char* key, long long int newValue, char* reason, char* claimant, char* law, char* bsn, long long int caseID, long long int oldValue, char* evidencePath, char autoApprove);
extern char* service_ClaimManager_ApproveClaim(long long int _handle, long long int ctx, char* claimID, char* verifiedBy, long long int verifiedValue);
extern char* service_ClaimManager_RejectClaim(long long int _handle, long long int ctx, char* claimID, char* rejectedBy, char* rejectionReason);
extern char* service_ClaimManager_LinkCase(long long int _handle, char* claimID, long long int caseID);
extern char* service_ClaimManager_AddEvidence(long long int _handle, char* claimID, char* evidencePath);
extern long long int service_ClaimManager_GetClaim(long long int _handle, char* claimID);
extern long long int service_ClaimManager_GetClaimsByService(long long int _handle, char* svc, char approved, char includeRejected);
extern long long int service_ClaimManager_GetClaimsByCase(long long int _handle, long long int caseID, char approved, char includeRejected);
extern long long int service_ClaimManager_GetClaimsByClaimant(long long int _handle, char* claimant, char approved, char includeRejected);
extern long long int service_ClaimManager_GetClaimsByBSN(long long int _handle, char* bsn, char approved, char includeRejected);
extern long long int service_ClaimManager_GetClaimByBSNServiceLaw(long long int _handle, char* bsn, char* svc, char* law, char approved, char includeRejected);
extern long long int service_NewRuleService(char* serviceName, long long int services);
extern long long int service_NewServices(long long int referenceDate);
extern long long int service_NewCaseManager(long long int services);
extern long long int service_NewClaimManager(long long int services);

#ifdef __cplusplus
}
#endif
