// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CaseStatus.
const (
	DECIDED   CaseStatus = "DECIDED"
	INREVIEW  CaseStatus = "IN_REVIEW"
	OBJECTED  CaseStatus = "OBJECTED"
	SUBMITTED CaseStatus = "SUBMITTED"
)

// Defines values for ClaimStatus.
const (
	APPROVED ClaimStatus = "APPROVED"
	PENDING  ClaimStatus = "PENDING"
	REJECTED ClaimStatus = "REJECTED"
)

// Case Case
type Case struct {
	AppealStatus       *map[string]interface{} `json:"appealStatus,omitempty"`
	Approved           *bool                   `json:"approved,omitempty"`
	ApprovedClaimsOnly bool                    `json:"approvedClaimsOnly"`

	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn           Bsn                    `json:"bsn"`
	ClaimedResult map[string]interface{} `json:"claimedResult"`

	// Id Identifier of a case
	Id CaseID `json:"id"`

	// Law Specify the law that needs to be executed
	Law string `json:"law"`

	// ObjectionStatus Parameters to set the objection status
	ObjectionStatus *CaseObjectionStatus   `json:"objectionStatus,omitempty"`
	Parameters      map[string]interface{} `json:"parameters"`

	// RulespecId Identifier of the rulespec
	RulespecId openapi_types.UUID `json:"rulespecId"`

	// Service Specify the service that needs to be executed
	Service        string                 `json:"service"`
	Status         CaseStatus             `json:"status"`
	VerifiedResult map[string]interface{} `json:"verifiedResult"`
}

// CaseStatus defines model for Case.Status.
type CaseStatus string

// CaseList List of all cases
type CaseList = []Case

// CaseObjectionStatus Parameters to set the objection status
type CaseObjectionStatus struct {
	Admissable        *bool   `json:"admissable,omitempty"`
	DecisionPeriod    *int    `json:"decisionPeriod,omitempty"`
	ExtensionPeriod   *int    `json:"extensionPeriod,omitempty"`
	NotPossibleReason *string `json:"notPossibleReason,omitempty"`
	ObjectionPeriod   *int    `json:"objectionPeriod,omitempty"`
	Possible          *bool   `json:"possible,omitempty"`
}

// CaseReview defines model for CaseReview.
type CaseReview struct {
	// Approved Decision outcome - true for approval, false for rejection
	Approved bool `json:"approved"`

	// Reason Explanation for the decision
	Reason string `json:"reason"`

	// VerifierId ID of the verifier making the decision
	VerifierId string `json:"verifierId"`
}

// CaseSubmit Case
type CaseSubmit struct {
	ApprovedClaimsOnly bool `json:"approvedClaimsOnly"`

	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn           Bsn                    `json:"bsn"`
	ClaimedResult map[string]interface{} `json:"claimedResult"`

	// Law Specify the law that needs to be executed
	Law        string                 `json:"law"`
	Parameters map[string]interface{} `json:"parameters"`

	// Service Specify the service that needs to be executed
	Service string `json:"service"`
}

// Claim Claim
type Claim struct {
	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn Bsn `json:"bsn"`

	// CaseId Identifier of a case
	CaseId       *CaseID `json:"caseId,omitempty"`
	Claimant     string  `json:"claimant"`
	EvidencePath *string `json:"evidencePath,omitempty"`

	// Id Identifier of a claim
	Id  ClaimID `json:"id"`
	Key string  `json:"key"`

	// Law Specify the law that needs to be executed
	Law      string       `json:"law"`
	NewValue interface{}  `json:"newValue"`
	OldValue *interface{} `json:"oldValue,omitempty"`
	Reason   string       `json:"reason"`

	// Service Specify the service that needs to be executed
	Service string      `json:"service"`
	Status  ClaimStatus `json:"status"`
}

// ClaimStatus defines model for Claim.Status.
type ClaimStatus string

// ClaimApprove Approve a claim
type ClaimApprove struct {
	// VerifiedBy User that verified the claim
	VerifiedBy string `json:"verifiedBy"`

	// VerifiedValue Verified value for the claim
	VerifiedValue string `json:"verifiedValue"`
}

// ClaimList List of all claims
type ClaimList = []Claim

// ClaimReject Reject a claim
type ClaimReject struct {
	// RejectedBy User that rejected the claim
	RejectedBy string `json:"rejectedBy"`

	// RejectionReason Reason of the rejection
	RejectionReason string `json:"rejectionReason"`
}

// ClaimSubmit Submit a new claim
type ClaimSubmit struct {
	// AutoApprove Whether to automatically approve the claim
	AutoApprove *bool `json:"autoApprove,omitempty"`

	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn Bsn `json:"bsn"`

	// CaseId Optional identifier of the related case
	CaseId *openapi_types.UUID `json:"caseId"`

	// Claimant Identity of the claimant
	Claimant string `json:"claimant"`

	// EvidencePath Path to evidence supporting the claim
	EvidencePath *string `json:"evidencePath"`

	// Key Key to be claimed
	Key string `json:"key"`

	// Law Legal basis for the claim
	Law      string       `json:"law"`
	NewValue interface{}  `json:"newValue"`
	OldValue *interface{} `json:"oldValue,omitempty"`

	// Reason Reason for the claim
	Reason string `json:"reason"`

	// Service Service identifier
	Service string `json:"service"`
}

// Error The error that occured while processing this request.
type Error struct {
	Message string `json:"message"`
}

// Evaluate Evaluate.
type Evaluate struct {
	// Approved only use approved claims, default to true
	Approved *bool `json:"approved,omitempty"`

	// Date Can be used to overwrite the date used by the service
	Date  *openapi_types.Date                `json:"date,omitempty"`
	Input *map[string]map[string]interface{} `json:"input,omitempty"`

	// Law Specify the law that needs to be executed
	Law string `json:"law"`

	// Output specify a requested output value
	Output     *string                 `json:"output,omitempty"`
	Parameters *map[string]interface{} `json:"parameters,omitempty"`

	// Service Specify the service that needs to be executed
	Service string `json:"service"`
}

// EvaluateResponseSchema Evaluate response
type EvaluateResponseSchema struct {
	Input map[string]interface{} `json:"input"`

	// MissingRequired Will be true when a required value is missing
	MissingRequired bool                   `json:"missingRequired"`
	Output          map[string]interface{} `json:"output"`

	// Path path node
	Path PathNode `json:"path"`

	// RequirementsMet Will be true when all requirements where met
	RequirementsMet bool `json:"requirementsMet"`

	// RulespecId Identifier of the rulespec
	RulespecId openapi_types.UUID `json:"rulespecId"`
}

// Event Event
type Event struct {
	Data map[string]interface{} `json:"data"`

	// EventType Type of the event
	EventType string    `json:"eventType"`
	Timestamp time.Time `json:"timestamp"`
}

// EventList List of all events
type EventList = []Event

// Law Law
type Law struct {
	// DiscoverableBy Who can discover this law
	DiscoverableBy []string `json:"discoverableBy"`

	// Name Name of the law
	Name string `json:"name"`
}

// PathNode path node
type PathNode struct {
	Children    *[]PathNode             `json:"children,omitempty"`
	Details     *map[string]interface{} `json:"details,omitempty"`
	Name        string                  `json:"name"`
	Required    *bool                   `json:"required,omitempty"`
	ResolveType *string                 `json:"resolveType,omitempty"`
	Result      *interface{}            `json:"result,omitempty"`
	Type        string                  `json:"type"`
}

// Profile Profile
type Profile struct {
	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn Bsn `json:"bsn"`

	// Description Description of the burger
	Description string `json:"description"`

	// Name Name of the burger
	Name string `json:"name"`

	// Sources All sources for a certain profile
	Sources map[string]Source `json:"sources"`
}

// ProfileList List of all burgers
type ProfileList = []Profile

// RuleSpec Rule spec
type RuleSpec map[string]interface{}

// Service Service
type Service struct {
	Laws []Law `json:"laws"`

	// Name Service name
	Name string `json:"name"`
}

// ServiceList List of all services
type ServiceList = []Service

// Source A source
type Source map[string][]map[string]interface{}

// Bsn Burgerservicenummer of a Dutch citizen
type Bsn = string

// CaseID Identifier of a case
type CaseID = openapi_types.UUID

// ClaimID Identifier of a claim
type ClaimID = openapi_types.UUID

// DiscoverableBy DiscoverableBy is a string that can be used to filter lists
type DiscoverableBy = string

// ReferenceDate reference date
type ReferenceDate = openapi_types.Date

// PathBSN Burgerservicenummer of a Dutch citizen
type PathBSN = Bsn

// PathCaseID Identifier of a case
type PathCaseID = CaseID

// PathClaimID Identifier of a claim
type PathClaimID = ClaimID

// PathLaw defines model for pathLaw.
type PathLaw = string

// PathService defines model for pathService.
type PathService = string

// QueryDiscoverableBy DiscoverableBy is a string that can be used to filter lists
type QueryDiscoverableBy = DiscoverableBy

// QueryIncludeRejected defines model for queryIncludeRejected.
type QueryIncludeRejected = bool

// QueryLaw defines model for queryLaw.
type QueryLaw = string

// QueryOnlyApproved defines model for queryOnlyApproved.
type QueryOnlyApproved = bool

// QueryReferenceDate reference date
type QueryReferenceDate = ReferenceDate

// QueryService defines model for queryService.
type QueryService = string

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Errors []Error `json:"errors"`
}

// CaseListResponse defines model for CaseListResponse.
type CaseListResponse struct {
	// Data List of all cases
	Data CaseList `json:"data"`
}

// CaseResponse defines model for CaseResponse.
type CaseResponse struct {
	// Data Case
	Data Case `json:"data"`
}

// CaseReviewResponse defines model for CaseReviewResponse.
type CaseReviewResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

// CaseSubmitResponse defines model for CaseSubmitResponse.
type CaseSubmitResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

// ClaimApproveResponse defines model for ClaimApproveResponse.
type ClaimApproveResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

// ClaimListResponse defines model for ClaimListResponse.
type ClaimListResponse struct {
	// Data List of all claims
	Data ClaimList `json:"data"`
}

// ClaimListWithKeyResponse defines model for ClaimListWithKeyResponse.
type ClaimListWithKeyResponse struct {
	Data map[string]Claim `json:"data"`
}

// ClaimRejectResponse defines model for ClaimRejectResponse.
type ClaimRejectResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

// ClaimSubmitResponse defines model for ClaimSubmitResponse.
type ClaimSubmitResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

// EvaluateResponse defines model for EvaluateResponse.
type EvaluateResponse struct {
	// Data Evaluate response
	Data EvaluateResponseSchema `json:"data"`
}

// EventListResponse defines model for EventListResponse.
type EventListResponse struct {
	// Data List of all events
	Data EventList `json:"data"`
}

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse struct {
	Errors []Error `json:"errors"`
}

// ProfileListResponse defines model for ProfileListResponse.
type ProfileListResponse struct {
	// Data List of all burgers
	Data ProfileList `json:"data"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	// Data Profile
	Data Profile `json:"data"`
}

// ResourceNotFoundErrorResponse defines model for ResourceNotFoundErrorResponse.
type ResourceNotFoundErrorResponse struct {
	Errors *[]Error `json:"errors,omitempty"`
}

// RuleSpecResponse defines model for RuleSpecResponse.
type RuleSpecResponse struct {
	// Data Rule spec
	Data RuleSpec `json:"data"`
}

// ServiceListResponse defines model for ServiceListResponse.
type ServiceListResponse struct {
	// Data List of all services
	Data ServiceList `json:"data"`
}

// CaseReviewRequest defines model for CaseReviewRequest.
type CaseReviewRequest struct {
	Data CaseReview `json:"data"`
}

// CaseSubmitRequest defines model for CaseSubmitRequest.
type CaseSubmitRequest struct {
	// Data Case
	Data CaseSubmit `json:"data"`
}

// ClaimApproveRequest defines model for ClaimApproveRequest.
type ClaimApproveRequest struct {
	// Data Approve a claim
	Data ClaimApprove `json:"data"`
}

// ClaimRejectRequest defines model for ClaimRejectRequest.
type ClaimRejectRequest struct {
	// Data Reject a claim
	Data ClaimReject `json:"data"`
}

// ClaimSubmitRequest defines model for ClaimSubmitRequest.
type ClaimSubmitRequest struct {
	// Data Submit a new claim
	Data ClaimSubmit `json:"data"`
}

// EvaluateRequest defines model for EvaluateRequest.
type EvaluateRequest struct {
	// Data Evaluate.
	Data Evaluate `json:"data"`
}

// CaseSubmitJSONBody defines parameters for CaseSubmit.
type CaseSubmitJSONBody struct {
	// Data Case
	Data CaseSubmit `json:"data"`
}

// CaseReviewJSONBody defines parameters for CaseReview.
type CaseReviewJSONBody struct {
	Data CaseReview `json:"data"`
}

// ClaimSubmitJSONBody defines parameters for ClaimSubmit.
type ClaimSubmitJSONBody struct {
	// Data Submit a new claim
	Data ClaimSubmit `json:"data"`
}

// GetClaimsBsnParams defines parameters for GetClaimsBsn.
type GetClaimsBsnParams struct {
	// Approved If added to URI only approved claims will be returned.
	Approved *QueryOnlyApproved `form:"approved,omitempty" json:"approved,omitempty"`

	// IncludeRejected If added to URI rejected claims will be added to the return
	IncludeRejected *QueryIncludeRejected `form:"includeRejected,omitempty" json:"includeRejected,omitempty"`
}

// GetClaimsBsnServiceLawParams defines parameters for GetClaimsBsnServiceLaw.
type GetClaimsBsnServiceLawParams struct {
	// Approved If added to URI only approved claims will be returned.
	Approved *QueryOnlyApproved `form:"approved,omitempty" json:"approved,omitempty"`

	// IncludeRejected If added to URI rejected claims will be added to the return
	IncludeRejected *QueryIncludeRejected `form:"includeRejected,omitempty" json:"includeRejected,omitempty"`
}

// ClaimApproveJSONBody defines parameters for ClaimApprove.
type ClaimApproveJSONBody struct {
	// Data Approve a claim
	Data ClaimApprove `json:"data"`
}

// ClaimRejectJSONBody defines parameters for ClaimReject.
type ClaimRejectJSONBody struct {
	// Data Reject a claim
	Data ClaimReject `json:"data"`
}

// ServiceLawsDiscoverableListParams defines parameters for ServiceLawsDiscoverableList.
type ServiceLawsDiscoverableListParams struct {
	// DiscoverableBy Filter for discoverable by, defaults to 'CITIZEN'
	DiscoverableBy *QueryDiscoverableBy `form:"discoverableBy,omitempty" json:"discoverableBy,omitempty"`
}

// EvaluateJSONBody defines parameters for Evaluate.
type EvaluateJSONBody struct {
	// Data Evaluate.
	Data Evaluate `json:"data"`
}

// RuleSpecGetParams defines parameters for RuleSpecGet.
type RuleSpecGetParams struct {
	// Service filter for service
	Service QueryService `form:"service" json:"service"`

	// Law filter for law
	Law QueryLaw `form:"law" json:"law"`

	// ReferenceDate reference date
	ReferenceDate QueryReferenceDate `form:"referenceDate" json:"referenceDate"`
}

// CaseSubmitJSONRequestBody defines body for CaseSubmit for application/json ContentType.
type CaseSubmitJSONRequestBody CaseSubmitJSONBody

// CaseReviewJSONRequestBody defines body for CaseReview for application/json ContentType.
type CaseReviewJSONRequestBody CaseReviewJSONBody

// ClaimSubmitJSONRequestBody defines body for ClaimSubmit for application/json ContentType.
type ClaimSubmitJSONRequestBody ClaimSubmitJSONBody

// ClaimApproveJSONRequestBody defines body for ClaimApprove for application/json ContentType.
type ClaimApproveJSONRequestBody ClaimApproveJSONBody

// ClaimRejectJSONRequestBody defines body for ClaimReject for application/json ContentType.
type ClaimRejectJSONRequestBody ClaimRejectJSONBody

// EvaluateJSONRequestBody defines body for Evaluate for application/json ContentType.
type EvaluateJSONRequestBody EvaluateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /case)
	CaseSubmit(w http.ResponseWriter, r *http.Request)

	// (GET /case/{caseID})
	GetCaseCaseID(w http.ResponseWriter, r *http.Request, caseID PathCaseID)

	// (GET /case/{caseID}/events)
	GetCaseCaseIDEvents(w http.ResponseWriter, r *http.Request, caseID PathCaseID)

	// (GET /cases/{bsn}/{service}/{law})
	GetCasesBsnServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw)
	// Complete a manual review for a case
	// (POST /cases/{caseID}/review)
	CaseReview(w http.ResponseWriter, r *http.Request, caseID PathCaseID)

	// (GET /cases/{service}/{law})
	GetCasesServiceLaw(w http.ResponseWriter, r *http.Request, service PathService, law PathLaw)
	// Submit a new claim
	// (POST /claims)
	ClaimSubmit(w http.ResponseWriter, r *http.Request)

	// (GET /claims/{bsn})
	GetClaimsBsn(w http.ResponseWriter, r *http.Request, bsn PathBSN, params GetClaimsBsnParams)

	// (GET /claims/{bsn}/{service}/{law})
	GetClaimsBsnServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw, params GetClaimsBsnServiceLawParams)
	// Approve a claim
	// (POST /claims/{claimId}/approve)
	ClaimApprove(w http.ResponseWriter, r *http.Request, claimId PathClaimID)
	// Reject a claim
	// (POST /claims/{claimId}/reject)
	ClaimReject(w http.ResponseWriter, r *http.Request, claimId PathClaimID)

	// (GET /discoverable-service-laws)
	ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request, params ServiceLawsDiscoverableListParams)

	// (POST /evaluate)
	Evaluate(w http.ResponseWriter, r *http.Request)

	// (GET /events)
	GetEvents(w http.ResponseWriter, r *http.Request)

	// (GET /profiles)
	ProfileList(w http.ResponseWriter, r *http.Request)

	// (GET /profiles/{bsn})
	ProfileGet(w http.ResponseWriter, r *http.Request, bsn PathBSN)

	// (GET /rule-spec)
	RuleSpecGet(w http.ResponseWriter, r *http.Request, params RuleSpecGetParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /case)
func (_ Unimplemented) CaseSubmit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /case/{caseID})
func (_ Unimplemented) GetCaseCaseID(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /case/{caseID}/events)
func (_ Unimplemented) GetCaseCaseIDEvents(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /cases/{bsn}/{service}/{law})
func (_ Unimplemented) GetCasesBsnServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Complete a manual review for a case
// (POST /cases/{caseID}/review)
func (_ Unimplemented) CaseReview(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /cases/{service}/{law})
func (_ Unimplemented) GetCasesServiceLaw(w http.ResponseWriter, r *http.Request, service PathService, law PathLaw) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit a new claim
// (POST /claims)
func (_ Unimplemented) ClaimSubmit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /claims/{bsn})
func (_ Unimplemented) GetClaimsBsn(w http.ResponseWriter, r *http.Request, bsn PathBSN, params GetClaimsBsnParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /claims/{bsn}/{service}/{law})
func (_ Unimplemented) GetClaimsBsnServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw, params GetClaimsBsnServiceLawParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Approve a claim
// (POST /claims/{claimId}/approve)
func (_ Unimplemented) ClaimApprove(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reject a claim
// (POST /claims/{claimId}/reject)
func (_ Unimplemented) ClaimReject(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /discoverable-service-laws)
func (_ Unimplemented) ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request, params ServiceLawsDiscoverableListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /evaluate)
func (_ Unimplemented) Evaluate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /events)
func (_ Unimplemented) GetEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /profiles)
func (_ Unimplemented) ProfileList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /profiles/{bsn})
func (_ Unimplemented) ProfileGet(w http.ResponseWriter, r *http.Request, bsn PathBSN) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /rule-spec)
func (_ Unimplemented) RuleSpecGet(w http.ResponseWriter, r *http.Request, params RuleSpecGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CaseSubmit operation middleware
func (siw *ServerInterfaceWrapper) CaseSubmit(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCaseCaseID operation middleware
func (siw *ServerInterfaceWrapper) GetCaseCaseID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "caseID" -------------
	var caseID PathCaseID

	err = runtime.BindStyledParameterWithOptions("simple", "caseID", chi.URLParam(r, "caseID"), &caseID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "caseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCaseCaseID(w, r, caseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCaseCaseIDEvents operation middleware
func (siw *ServerInterfaceWrapper) GetCaseCaseIDEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "caseID" -------------
	var caseID PathCaseID

	err = runtime.BindStyledParameterWithOptions("simple", "caseID", chi.URLParam(r, "caseID"), &caseID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "caseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCaseCaseIDEvents(w, r, caseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCasesBsnServiceLaw operation middleware
func (siw *ServerInterfaceWrapper) GetCasesBsnServiceLaw(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	// ------------- Path parameter "service" -------------
	var service PathService

	err = runtime.BindStyledParameterWithOptions("simple", "service", chi.URLParam(r, "service"), &service, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Path parameter "law" -------------
	var law PathLaw

	err = runtime.BindStyledParameterWithOptions("simple", "law", chi.URLParam(r, "law"), &law, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCasesBsnServiceLaw(w, r, bsn, service, law)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CaseReview operation middleware
func (siw *ServerInterfaceWrapper) CaseReview(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "caseID" -------------
	var caseID PathCaseID

	err = runtime.BindStyledParameterWithOptions("simple", "caseID", chi.URLParam(r, "caseID"), &caseID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "caseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseReview(w, r, caseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCasesServiceLaw operation middleware
func (siw *ServerInterfaceWrapper) GetCasesServiceLaw(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "service" -------------
	var service PathService

	err = runtime.BindStyledParameterWithOptions("simple", "service", chi.URLParam(r, "service"), &service, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Path parameter "law" -------------
	var law PathLaw

	err = runtime.BindStyledParameterWithOptions("simple", "law", chi.URLParam(r, "law"), &law, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCasesServiceLaw(w, r, service, law)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimSubmit operation middleware
func (siw *ServerInterfaceWrapper) ClaimSubmit(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClaimsBsn operation middleware
func (siw *ServerInterfaceWrapper) GetClaimsBsn(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClaimsBsnParams

	// ------------- Optional query parameter "approved" -------------

	err = runtime.BindQueryParameter("form", true, false, "approved", r.URL.Query(), &params.Approved)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "approved", Err: err})
		return
	}

	// ------------- Optional query parameter "includeRejected" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeRejected", r.URL.Query(), &params.IncludeRejected)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeRejected", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClaimsBsn(w, r, bsn, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetClaimsBsnServiceLaw operation middleware
func (siw *ServerInterfaceWrapper) GetClaimsBsnServiceLaw(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	// ------------- Path parameter "service" -------------
	var service PathService

	err = runtime.BindStyledParameterWithOptions("simple", "service", chi.URLParam(r, "service"), &service, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Path parameter "law" -------------
	var law PathLaw

	err = runtime.BindStyledParameterWithOptions("simple", "law", chi.URLParam(r, "law"), &law, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClaimsBsnServiceLawParams

	// ------------- Optional query parameter "approved" -------------

	err = runtime.BindQueryParameter("form", true, false, "approved", r.URL.Query(), &params.Approved)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "approved", Err: err})
		return
	}

	// ------------- Optional query parameter "includeRejected" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeRejected", r.URL.Query(), &params.IncludeRejected)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeRejected", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClaimsBsnServiceLaw(w, r, bsn, service, law, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimApprove operation middleware
func (siw *ServerInterfaceWrapper) ClaimApprove(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "claimId" -------------
	var claimId PathClaimID

	err = runtime.BindStyledParameterWithOptions("simple", "claimId", chi.URLParam(r, "claimId"), &claimId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "claimId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimApprove(w, r, claimId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimReject operation middleware
func (siw *ServerInterfaceWrapper) ClaimReject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "claimId" -------------
	var claimId PathClaimID

	err = runtime.BindStyledParameterWithOptions("simple", "claimId", chi.URLParam(r, "claimId"), &claimId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "claimId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimReject(w, r, claimId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ServiceLawsDiscoverableList operation middleware
func (siw *ServerInterfaceWrapper) ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceLawsDiscoverableListParams

	// ------------- Optional query parameter "discoverableBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "discoverableBy", r.URL.Query(), &params.DiscoverableBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "discoverableBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServiceLawsDiscoverableList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Evaluate operation middleware
func (siw *ServerInterfaceWrapper) Evaluate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Evaluate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProfileList operation middleware
func (siw *ServerInterfaceWrapper) ProfileList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProfileList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProfileGet operation middleware
func (siw *ServerInterfaceWrapper) ProfileGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProfileGet(w, r, bsn)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RuleSpecGet operation middleware
func (siw *ServerInterfaceWrapper) RuleSpecGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RuleSpecGetParams

	// ------------- Required query parameter "service" -------------

	if paramValue := r.URL.Query().Get("service"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "service"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "service", r.URL.Query(), &params.Service)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Required query parameter "law" -------------

	if paramValue := r.URL.Query().Get("law"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "law"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "law", r.URL.Query(), &params.Law)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	// ------------- Required query parameter "referenceDate" -------------

	if paramValue := r.URL.Query().Get("referenceDate"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "referenceDate"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "referenceDate", r.URL.Query(), &params.ReferenceDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "referenceDate", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RuleSpecGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/case", wrapper.CaseSubmit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/case/{caseID}", wrapper.GetCaseCaseID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/case/{caseID}/events", wrapper.GetCaseCaseIDEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cases/{bsn}/{service}/{law}", wrapper.GetCasesBsnServiceLaw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cases/{caseID}/review", wrapper.CaseReview)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cases/{service}/{law}", wrapper.GetCasesServiceLaw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/claims", wrapper.ClaimSubmit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/claims/{bsn}", wrapper.GetClaimsBsn)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/claims/{bsn}/{service}/{law}", wrapper.GetClaimsBsnServiceLaw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/claims/{claimId}/approve", wrapper.ClaimApprove)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/claims/{claimId}/reject", wrapper.ClaimReject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/discoverable-service-laws", wrapper.ServiceLawsDiscoverableList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/evaluate", wrapper.Evaluate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events", wrapper.GetEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profiles", wrapper.ProfileList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profiles/{bsn}", wrapper.ProfileGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rule-spec", wrapper.RuleSpecGet)
	})

	return r
}

type BadRequestErrorResponseJSONResponse struct {
	Errors []Error `json:"errors"`
}

type CaseListResponseJSONResponse struct {
	// Data List of all cases
	Data CaseList `json:"data"`
}

type CaseResponseJSONResponse struct {
	// Data Case
	Data Case `json:"data"`
}

type CaseReviewResponseJSONResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

type CaseSubmitResponseJSONResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

type ClaimApproveResponseJSONResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

type ClaimListResponseJSONResponse struct {
	// Data List of all claims
	Data ClaimList `json:"data"`
}

type ClaimListWithKeyResponseJSONResponse struct {
	Data map[string]Claim `json:"data"`
}

type ClaimRejectResponseJSONResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

type ClaimSubmitResponseJSONResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

type EvaluateResponseJSONResponse struct {
	// Data Evaluate response
	Data EvaluateResponseSchema `json:"data"`
}

type EventListResponseJSONResponse struct {
	// Data List of all events
	Data EventList `json:"data"`
}

type InternalServerErrorResponseJSONResponse struct {
	Errors []Error `json:"errors"`
}

type ProfileListResponseJSONResponse struct {
	// Data List of all burgers
	Data ProfileList `json:"data"`
}

type ProfileResponseJSONResponse struct {
	// Data Profile
	Data Profile `json:"data"`
}

type ResourceNotFoundErrorResponseJSONResponse struct {
	Errors *[]Error `json:"errors,omitempty"`
}

type RuleSpecResponseJSONResponse struct {
	// Data Rule spec
	Data RuleSpec `json:"data"`
}

type ServiceListResponseJSONResponse struct {
	// Data List of all services
	Data ServiceList `json:"data"`
}

type CaseSubmitRequestObject struct {
	Body *CaseSubmitJSONRequestBody
}

type CaseSubmitResponseObject interface {
	VisitCaseSubmitResponse(w http.ResponseWriter) error
}

type CaseSubmit201JSONResponse struct{ CaseSubmitResponseJSONResponse }

func (response CaseSubmit201JSONResponse) VisitCaseSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CaseSubmit400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseSubmit400JSONResponse) VisitCaseSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseSubmit500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseSubmit500JSONResponse) VisitCaseSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseIDRequestObject struct {
	CaseID PathCaseID `json:"caseID"`
}

type GetCaseCaseIDResponseObject interface {
	VisitGetCaseCaseIDResponse(w http.ResponseWriter) error
}

type GetCaseCaseID200JSONResponse struct{ CaseResponseJSONResponse }

func (response GetCaseCaseID200JSONResponse) VisitGetCaseCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseID400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response GetCaseCaseID400JSONResponse) VisitGetCaseCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseID404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response GetCaseCaseID404JSONResponse) VisitGetCaseCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseID500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetCaseCaseID500JSONResponse) VisitGetCaseCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseIDEventsRequestObject struct {
	CaseID PathCaseID `json:"caseID"`
}

type GetCaseCaseIDEventsResponseObject interface {
	VisitGetCaseCaseIDEventsResponse(w http.ResponseWriter) error
}

type GetCaseCaseIDEvents200JSONResponse struct{ EventListResponseJSONResponse }

func (response GetCaseCaseIDEvents200JSONResponse) VisitGetCaseCaseIDEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseIDEvents400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response GetCaseCaseIDEvents400JSONResponse) VisitGetCaseCaseIDEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseIDEvents404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response GetCaseCaseIDEvents404JSONResponse) VisitGetCaseCaseIDEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCaseCaseIDEvents500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetCaseCaseIDEvents500JSONResponse) VisitGetCaseCaseIDEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesBsnServiceLawRequestObject struct {
	Bsn     PathBSN     `json:"bsn"`
	Service PathService `json:"service"`
	Law     PathLaw     `json:"law"`
}

type GetCasesBsnServiceLawResponseObject interface {
	VisitGetCasesBsnServiceLawResponse(w http.ResponseWriter) error
}

type GetCasesBsnServiceLaw200JSONResponse struct{ CaseResponseJSONResponse }

func (response GetCasesBsnServiceLaw200JSONResponse) VisitGetCasesBsnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesBsnServiceLaw400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response GetCasesBsnServiceLaw400JSONResponse) VisitGetCasesBsnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesBsnServiceLaw404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response GetCasesBsnServiceLaw404JSONResponse) VisitGetCasesBsnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesBsnServiceLaw500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetCasesBsnServiceLaw500JSONResponse) VisitGetCasesBsnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CaseReviewRequestObject struct {
	CaseID PathCaseID `json:"caseID"`
	Body   *CaseReviewJSONRequestBody
}

type CaseReviewResponseObject interface {
	VisitCaseReviewResponse(w http.ResponseWriter) error
}

type CaseReview200JSONResponse struct{ CaseReviewResponseJSONResponse }

func (response CaseReview200JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CaseReview400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseReview400JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseReview404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response CaseReview404JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CaseReview500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseReview500JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesServiceLawRequestObject struct {
	Service PathService `json:"service"`
	Law     PathLaw     `json:"law"`
}

type GetCasesServiceLawResponseObject interface {
	VisitGetCasesServiceLawResponse(w http.ResponseWriter) error
}

type GetCasesServiceLaw200JSONResponse struct{ CaseListResponseJSONResponse }

func (response GetCasesServiceLaw200JSONResponse) VisitGetCasesServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesServiceLaw400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response GetCasesServiceLaw400JSONResponse) VisitGetCasesServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCasesServiceLaw500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetCasesServiceLaw500JSONResponse) VisitGetCasesServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimSubmitRequestObject struct {
	Body *ClaimSubmitJSONRequestBody
}

type ClaimSubmitResponseObject interface {
	VisitClaimSubmitResponse(w http.ResponseWriter) error
}

type ClaimSubmit201JSONResponse struct {
	ClaimSubmitResponseJSONResponse
}

func (response ClaimSubmit201JSONResponse) VisitClaimSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ClaimSubmit400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimSubmit400JSONResponse) VisitClaimSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimSubmit500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimSubmit500JSONResponse) VisitClaimSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimsBsnRequestObject struct {
	Bsn    PathBSN `json:"bsn"`
	Params GetClaimsBsnParams
}

type GetClaimsBsnResponseObject interface {
	VisitGetClaimsBsnResponse(w http.ResponseWriter) error
}

type GetClaimsBsn200JSONResponse struct{ ClaimListResponseJSONResponse }

func (response GetClaimsBsn200JSONResponse) VisitGetClaimsBsnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimsBsn400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response GetClaimsBsn400JSONResponse) VisitGetClaimsBsnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimsBsn500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetClaimsBsn500JSONResponse) VisitGetClaimsBsnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimsBsnServiceLawRequestObject struct {
	Bsn     PathBSN     `json:"bsn"`
	Service PathService `json:"service"`
	Law     PathLaw     `json:"law"`
	Params  GetClaimsBsnServiceLawParams
}

type GetClaimsBsnServiceLawResponseObject interface {
	VisitGetClaimsBsnServiceLawResponse(w http.ResponseWriter) error
}

type GetClaimsBsnServiceLaw200JSONResponse struct {
	ClaimListWithKeyResponseJSONResponse
}

func (response GetClaimsBsnServiceLaw200JSONResponse) VisitGetClaimsBsnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimsBsnServiceLaw400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response GetClaimsBsnServiceLaw400JSONResponse) VisitGetClaimsBsnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimsBsnServiceLaw500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetClaimsBsnServiceLaw500JSONResponse) VisitGetClaimsBsnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApproveRequestObject struct {
	ClaimId PathClaimID `json:"claimId"`
	Body    *ClaimApproveJSONRequestBody
}

type ClaimApproveResponseObject interface {
	VisitClaimApproveResponse(w http.ResponseWriter) error
}

type ClaimApprove200JSONResponse struct {
	ClaimApproveResponseJSONResponse
}

func (response ClaimApprove200JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApprove400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimApprove400JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApprove404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response ClaimApprove404JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApprove500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimApprove500JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimRejectRequestObject struct {
	ClaimId PathClaimID `json:"claimId"`
	Body    *ClaimRejectJSONRequestBody
}

type ClaimRejectResponseObject interface {
	VisitClaimRejectResponse(w http.ResponseWriter) error
}

type ClaimReject200JSONResponse struct {
	ClaimRejectResponseJSONResponse
}

func (response ClaimReject200JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClaimReject400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimReject400JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimReject404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response ClaimReject404JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ClaimReject500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimReject500JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ServiceLawsDiscoverableListRequestObject struct {
	Params ServiceLawsDiscoverableListParams
}

type ServiceLawsDiscoverableListResponseObject interface {
	VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error
}

type ServiceLawsDiscoverableList200JSONResponse struct {
	ServiceListResponseJSONResponse
}

func (response ServiceLawsDiscoverableList200JSONResponse) VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ServiceLawsDiscoverableList400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ServiceLawsDiscoverableList400JSONResponse) VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ServiceLawsDiscoverableList500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ServiceLawsDiscoverableList500JSONResponse) VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type EvaluateRequestObject struct {
	Body *EvaluateJSONRequestBody
}

type EvaluateResponseObject interface {
	VisitEvaluateResponse(w http.ResponseWriter) error
}

type Evaluate201JSONResponse struct{ EvaluateResponseJSONResponse }

func (response Evaluate201JSONResponse) VisitEvaluateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type Evaluate400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response Evaluate400JSONResponse) VisitEvaluateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Evaluate500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response Evaluate500JSONResponse) VisitEvaluateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsRequestObject struct {
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse struct{ EventListResponseJSONResponse }

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response GetEvents400JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetEvents500JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProfileListRequestObject struct {
}

type ProfileListResponseObject interface {
	VisitProfileListResponse(w http.ResponseWriter) error
}

type ProfileList200JSONResponse struct {
	ProfileListResponseJSONResponse
}

func (response ProfileList200JSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileList400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ProfileList400JSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProfileList500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ProfileList500JSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGetRequestObject struct {
	Bsn PathBSN `json:"bsn"`
}

type ProfileGetResponseObject interface {
	VisitProfileGetResponse(w http.ResponseWriter) error
}

type ProfileGet200JSONResponse struct{ ProfileResponseJSONResponse }

func (response ProfileGet200JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ProfileGet400JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response ProfileGet404JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ProfileGet500JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RuleSpecGetRequestObject struct {
	Params RuleSpecGetParams
}

type RuleSpecGetResponseObject interface {
	VisitRuleSpecGetResponse(w http.ResponseWriter) error
}

type RuleSpecGet200JSONResponse struct{ RuleSpecResponseJSONResponse }

func (response RuleSpecGet200JSONResponse) VisitRuleSpecGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RuleSpecGet400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response RuleSpecGet400JSONResponse) VisitRuleSpecGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RuleSpecGet500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response RuleSpecGet500JSONResponse) VisitRuleSpecGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /case)
	CaseSubmit(ctx context.Context, request CaseSubmitRequestObject) (CaseSubmitResponseObject, error)

	// (GET /case/{caseID})
	GetCaseCaseID(ctx context.Context, request GetCaseCaseIDRequestObject) (GetCaseCaseIDResponseObject, error)

	// (GET /case/{caseID}/events)
	GetCaseCaseIDEvents(ctx context.Context, request GetCaseCaseIDEventsRequestObject) (GetCaseCaseIDEventsResponseObject, error)

	// (GET /cases/{bsn}/{service}/{law})
	GetCasesBsnServiceLaw(ctx context.Context, request GetCasesBsnServiceLawRequestObject) (GetCasesBsnServiceLawResponseObject, error)
	// Complete a manual review for a case
	// (POST /cases/{caseID}/review)
	CaseReview(ctx context.Context, request CaseReviewRequestObject) (CaseReviewResponseObject, error)

	// (GET /cases/{service}/{law})
	GetCasesServiceLaw(ctx context.Context, request GetCasesServiceLawRequestObject) (GetCasesServiceLawResponseObject, error)
	// Submit a new claim
	// (POST /claims)
	ClaimSubmit(ctx context.Context, request ClaimSubmitRequestObject) (ClaimSubmitResponseObject, error)

	// (GET /claims/{bsn})
	GetClaimsBsn(ctx context.Context, request GetClaimsBsnRequestObject) (GetClaimsBsnResponseObject, error)

	// (GET /claims/{bsn}/{service}/{law})
	GetClaimsBsnServiceLaw(ctx context.Context, request GetClaimsBsnServiceLawRequestObject) (GetClaimsBsnServiceLawResponseObject, error)
	// Approve a claim
	// (POST /claims/{claimId}/approve)
	ClaimApprove(ctx context.Context, request ClaimApproveRequestObject) (ClaimApproveResponseObject, error)
	// Reject a claim
	// (POST /claims/{claimId}/reject)
	ClaimReject(ctx context.Context, request ClaimRejectRequestObject) (ClaimRejectResponseObject, error)

	// (GET /discoverable-service-laws)
	ServiceLawsDiscoverableList(ctx context.Context, request ServiceLawsDiscoverableListRequestObject) (ServiceLawsDiscoverableListResponseObject, error)

	// (POST /evaluate)
	Evaluate(ctx context.Context, request EvaluateRequestObject) (EvaluateResponseObject, error)

	// (GET /events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)

	// (GET /profiles)
	ProfileList(ctx context.Context, request ProfileListRequestObject) (ProfileListResponseObject, error)

	// (GET /profiles/{bsn})
	ProfileGet(ctx context.Context, request ProfileGetRequestObject) (ProfileGetResponseObject, error)

	// (GET /rule-spec)
	RuleSpecGet(ctx context.Context, request RuleSpecGetRequestObject) (RuleSpecGetResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CaseSubmit operation middleware
func (sh *strictHandler) CaseSubmit(w http.ResponseWriter, r *http.Request) {
	var request CaseSubmitRequestObject

	var body CaseSubmitJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseSubmit(ctx, request.(CaseSubmitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseSubmit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseSubmitResponseObject); ok {
		if err := validResponse.VisitCaseSubmitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCaseCaseID operation middleware
func (sh *strictHandler) GetCaseCaseID(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	var request GetCaseCaseIDRequestObject

	request.CaseID = caseID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCaseCaseID(ctx, request.(GetCaseCaseIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCaseCaseID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCaseCaseIDResponseObject); ok {
		if err := validResponse.VisitGetCaseCaseIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCaseCaseIDEvents operation middleware
func (sh *strictHandler) GetCaseCaseIDEvents(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	var request GetCaseCaseIDEventsRequestObject

	request.CaseID = caseID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCaseCaseIDEvents(ctx, request.(GetCaseCaseIDEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCaseCaseIDEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCaseCaseIDEventsResponseObject); ok {
		if err := validResponse.VisitGetCaseCaseIDEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCasesBsnServiceLaw operation middleware
func (sh *strictHandler) GetCasesBsnServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw) {
	var request GetCasesBsnServiceLawRequestObject

	request.Bsn = bsn
	request.Service = service
	request.Law = law

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCasesBsnServiceLaw(ctx, request.(GetCasesBsnServiceLawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCasesBsnServiceLaw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCasesBsnServiceLawResponseObject); ok {
		if err := validResponse.VisitGetCasesBsnServiceLawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CaseReview operation middleware
func (sh *strictHandler) CaseReview(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	var request CaseReviewRequestObject

	request.CaseID = caseID

	var body CaseReviewJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseReview(ctx, request.(CaseReviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseReview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseReviewResponseObject); ok {
		if err := validResponse.VisitCaseReviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCasesServiceLaw operation middleware
func (sh *strictHandler) GetCasesServiceLaw(w http.ResponseWriter, r *http.Request, service PathService, law PathLaw) {
	var request GetCasesServiceLawRequestObject

	request.Service = service
	request.Law = law

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCasesServiceLaw(ctx, request.(GetCasesServiceLawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCasesServiceLaw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCasesServiceLawResponseObject); ok {
		if err := validResponse.VisitGetCasesServiceLawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimSubmit operation middleware
func (sh *strictHandler) ClaimSubmit(w http.ResponseWriter, r *http.Request) {
	var request ClaimSubmitRequestObject

	var body ClaimSubmitJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimSubmit(ctx, request.(ClaimSubmitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimSubmit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimSubmitResponseObject); ok {
		if err := validResponse.VisitClaimSubmitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClaimsBsn operation middleware
func (sh *strictHandler) GetClaimsBsn(w http.ResponseWriter, r *http.Request, bsn PathBSN, params GetClaimsBsnParams) {
	var request GetClaimsBsnRequestObject

	request.Bsn = bsn
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClaimsBsn(ctx, request.(GetClaimsBsnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClaimsBsn")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClaimsBsnResponseObject); ok {
		if err := validResponse.VisitGetClaimsBsnResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClaimsBsnServiceLaw operation middleware
func (sh *strictHandler) GetClaimsBsnServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw, params GetClaimsBsnServiceLawParams) {
	var request GetClaimsBsnServiceLawRequestObject

	request.Bsn = bsn
	request.Service = service
	request.Law = law
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClaimsBsnServiceLaw(ctx, request.(GetClaimsBsnServiceLawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClaimsBsnServiceLaw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClaimsBsnServiceLawResponseObject); ok {
		if err := validResponse.VisitGetClaimsBsnServiceLawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimApprove operation middleware
func (sh *strictHandler) ClaimApprove(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	var request ClaimApproveRequestObject

	request.ClaimId = claimId

	var body ClaimApproveJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimApprove(ctx, request.(ClaimApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimApprove")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimApproveResponseObject); ok {
		if err := validResponse.VisitClaimApproveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimReject operation middleware
func (sh *strictHandler) ClaimReject(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	var request ClaimRejectRequestObject

	request.ClaimId = claimId

	var body ClaimRejectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimReject(ctx, request.(ClaimRejectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimReject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimRejectResponseObject); ok {
		if err := validResponse.VisitClaimRejectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ServiceLawsDiscoverableList operation middleware
func (sh *strictHandler) ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request, params ServiceLawsDiscoverableListParams) {
	var request ServiceLawsDiscoverableListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ServiceLawsDiscoverableList(ctx, request.(ServiceLawsDiscoverableListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ServiceLawsDiscoverableList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ServiceLawsDiscoverableListResponseObject); ok {
		if err := validResponse.VisitServiceLawsDiscoverableListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Evaluate operation middleware
func (sh *strictHandler) Evaluate(w http.ResponseWriter, r *http.Request) {
	var request EvaluateRequestObject

	var body EvaluateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Evaluate(ctx, request.(EvaluateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Evaluate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EvaluateResponseObject); ok {
		if err := validResponse.VisitEvaluateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(w http.ResponseWriter, r *http.Request) {
	var request GetEventsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProfileList operation middleware
func (sh *strictHandler) ProfileList(w http.ResponseWriter, r *http.Request) {
	var request ProfileListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileList(ctx, request.(ProfileListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProfileListResponseObject); ok {
		if err := validResponse.VisitProfileListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProfileGet operation middleware
func (sh *strictHandler) ProfileGet(w http.ResponseWriter, r *http.Request, bsn PathBSN) {
	var request ProfileGetRequestObject

	request.Bsn = bsn

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileGet(ctx, request.(ProfileGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProfileGetResponseObject); ok {
		if err := validResponse.VisitProfileGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RuleSpecGet operation middleware
func (sh *strictHandler) RuleSpecGet(w http.ResponseWriter, r *http.Request, params RuleSpecGetParams) {
	var request RuleSpecGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RuleSpecGet(ctx, request.(RuleSpecGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RuleSpecGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RuleSpecGetResponseObject); ok {
		if err := validResponse.VisitRuleSpecGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//81iwQ/XV8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
