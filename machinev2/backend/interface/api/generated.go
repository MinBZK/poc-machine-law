// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CaseStatus.
const (
	DECIDED   CaseStatus = "DECIDED"
	INREVIEW  CaseStatus = "IN_REVIEW"
	OBJECTED  CaseStatus = "OBJECTED"
	SUBMITTED CaseStatus = "SUBMITTED"
)

// Defines values for ClaimStatus.
const (
	APPROVED ClaimStatus = "APPROVED"
	PENDING  ClaimStatus = "PENDING"
	REJECTED ClaimStatus = "REJECTED"
)

// Action defines model for Action.
type Action struct {
	// Combine Combination method
	Combine *string `json:"combine"`

	// Conditions Conditional logic
	Conditions *[]Condition `json:"conditions,omitempty"`

	// Operation Operation to perform
	Operation *string `json:"operation"`

	// Output Action output
	Output string `json:"output"`

	// Subject Subject of the action
	Subject *string `json:"subject"`

	// Unit Unit for the action
	Unit *string `json:"unit"`

	// Value Represents a value in an operation (can be a primitive value or nested action)
	Value *ActionValue `json:"value,omitempty"`

	// Values Represents multiple values or a single value
	Values *ActionValues `json:"values,omitempty"`
}

// ActionRequirement Either a nested requirement or an action
type ActionRequirement struct {
	union json.RawMessage
}

// ActionValue Represents a value in an operation (can be a primitive value or nested action)
type ActionValue struct {
	union json.RawMessage
}

// ActionValue1 defines model for .
type ActionValue1 = interface{}

// ActionValues Represents multiple values or a single value
type ActionValues struct {
	union json.RawMessage
}

// ActionValues0 defines model for .
type ActionValues0 = []ActionValue

// ActionValues1 defines model for .
type ActionValues1 = interface{}

// Apply defines model for Apply.
type Apply struct {
	// Aggregate Aggregate identifier
	Aggregate string `json:"aggregate"`

	// Events Associated events
	Events []ApplyEvent `json:"events"`

	// Name Name of the application rule
	Name string `json:"name"`

	// Update Update rules
	Update []Update `json:"update"`
}

// ApplyEvent defines model for ApplyEvent.
type ApplyEvent struct {
	// Filter Event filter criteria
	Filter map[string]interface{} `json:"filter"`

	// Type Event type
	Type string `json:"type"`
}

// BaseField defines model for BaseField.
type BaseField struct {
	// Description Field description
	Description string `json:"description"`

	// Name Field name
	Name string `json:"name"`

	// Required Whether the field is required
	Required *bool     `json:"required"`
	Temporal *Temporal `json:"temporal,omitempty"`

	// Type Field type
	Type     string    `json:"type"`
	TypeSpec *TypeSpec `json:"type_spec,omitempty"`
}

// Case Case
type Case struct {
	// AppealStatus Parameters to set the objection status
	AppealStatus       *CaseAppealStatus `json:"appealStatus,omitempty"`
	Approved           *bool             `json:"approved,omitempty"`
	ApprovedClaimsOnly bool              `json:"approvedClaimsOnly"`

	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn           Bsn                    `json:"bsn"`
	ClaimedResult map[string]interface{} `json:"claimedResult"`

	// Id Identifier of a case
	Id CaseID `json:"id"`

	// Law Specify the law that needs to be executed
	Law string `json:"law"`

	// ObjectionStatus Parameters to set the objection status
	ObjectionStatus *CaseObjectionStatus   `json:"objectionStatus,omitempty"`
	Parameters      map[string]interface{} `json:"parameters"`

	// RulespecId Identifier of the rulespec
	RulespecId openapi_types.UUID `json:"rulespecId"`

	// Service Specify the service that needs to be executed
	Service        string                 `json:"service"`
	Status         CaseStatus             `json:"status"`
	VerifiedResult map[string]interface{} `json:"verifiedResult"`
}

// CaseStatus defines model for Case.Status.
type CaseStatus string

// CaseAppealStatus Parameters to set the objection status
type CaseAppealStatus struct {
	AppealPeriod       *int    `json:"appealPeriod,omitempty"`
	CompetentCourt     *string `json:"competentCourt,omitempty"`
	CourtType          *string `json:"courtType,omitempty"`
	DirectAppeal       *bool   `json:"directAppeal,omitempty"`
	DirectAppealReason *string `json:"directAppealReason,omitempty"`
	NotPossibleReason  *string `json:"notPossibleReason,omitempty"`
	Possible           *bool   `json:"possible,omitempty"`
}

// CaseList List of all cases
type CaseList = []Case

// CaseObject defines model for CaseObject.
type CaseObject struct {
	// Reason Explanation for the objection
	Reason string `json:"reason"`
}

// CaseObjectionStatus Parameters to set the objection status
type CaseObjectionStatus struct {
	Admissable        *bool   `json:"admissable,omitempty"`
	DecisionPeriod    *int    `json:"decisionPeriod,omitempty"`
	ExtensionPeriod   *int    `json:"extensionPeriod,omitempty"`
	NotPossibleReason *string `json:"notPossibleReason,omitempty"`
	ObjectionPeriod   *int    `json:"objectionPeriod,omitempty"`
	Possible          *bool   `json:"possible,omitempty"`
}

// CaseReview defines model for CaseReview.
type CaseReview struct {
	// Approved Decision outcome - true for approval, false for rejection
	Approved bool `json:"approved"`

	// Reason Explanation for the decision
	Reason string `json:"reason"`

	// VerifierId ID of the verifier making the decision
	VerifierId string `json:"verifierId"`
}

// CaseSubmit Case
type CaseSubmit struct {
	ApprovedClaimsOnly bool `json:"approvedClaimsOnly"`

	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn           Bsn                    `json:"bsn"`
	ClaimedResult map[string]interface{} `json:"claimedResult"`

	// Law Specify the law that needs to be executed
	Law        string                 `json:"law"`
	Parameters map[string]interface{} `json:"parameters"`

	// Service Specify the service that needs to be executed
	Service string `json:"service"`
}

// Claim Claim
type Claim struct {
	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn Bsn `json:"bsn"`

	// CaseId Identifier of a case
	CaseId       *CaseID `json:"caseId,omitempty"`
	Claimant     string  `json:"claimant"`
	EvidencePath *string `json:"evidencePath,omitempty"`

	// Id Identifier of a claim
	Id  ClaimID `json:"id"`
	Key string  `json:"key"`

	// Law Specify the law that needs to be executed
	Law      string       `json:"law"`
	NewValue interface{}  `json:"newValue"`
	OldValue *interface{} `json:"oldValue,omitempty"`
	Reason   string       `json:"reason"`

	// Service Specify the service that needs to be executed
	Service string      `json:"service"`
	Status  ClaimStatus `json:"status"`
}

// ClaimStatus defines model for Claim.Status.
type ClaimStatus string

// ClaimApprove Approve a claim
type ClaimApprove struct {
	// VerifiedBy User that verified the claim
	VerifiedBy string `json:"verifiedBy"`

	// VerifiedValue Verified value for the claim
	VerifiedValue string `json:"verifiedValue"`
}

// ClaimList List of all claims
type ClaimList = []Claim

// ClaimReject Reject a claim
type ClaimReject struct {
	// RejectedBy User that rejected the claim
	RejectedBy string `json:"rejectedBy"`

	// RejectionReason Reason of the rejection
	RejectionReason string `json:"rejectionReason"`
}

// ClaimSubmit Submit a new claim
type ClaimSubmit struct {
	// AutoApprove Whether to automatically approve the claim
	AutoApprove *bool `json:"autoApprove,omitempty"`

	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn Bsn `json:"bsn"`

	// CaseId Optional identifier of the related case
	CaseId *openapi_types.UUID `json:"caseId"`

	// Claimant Identity of the claimant
	Claimant string `json:"claimant"`

	// EvidencePath Path to evidence supporting the claim
	EvidencePath *string `json:"evidencePath"`

	// Key Key to be claimed
	Key string `json:"key"`

	// Law Legal basis for the claim
	Law      string       `json:"law"`
	NewValue interface{}  `json:"newValue"`
	OldValue *interface{} `json:"oldValue,omitempty"`

	// Reason Reason for the claim
	Reason string `json:"reason"`

	// Service Service identifier
	Service string `json:"service"`
}

// Condition Conditional logic with test, then, and optional else
type Condition struct {
	// Else Represents a value in an operation (can be a primitive value or nested action)
	Else *ActionValue `json:"else,omitempty"`
	Test *Action      `json:"test,omitempty"`

	// Then Represents a value in an operation (can be a primitive value or nested action)
	Then *ActionValue `json:"then,omitempty"`
}

// DataFrame defines model for DataFrame.
type DataFrame struct {
	// Data Column definitions for the data frame
	Data    []map[string]interface{} `json:"data"`
	Service string                   `json:"service"`
	Table   string                   `json:"table"`
}

// Error The error that occured while processing this request.
type Error struct {
	Message string `json:"message"`
}

// Evaluate Evaluate.
type Evaluate struct {
	// Approved only use approved claims, default to true
	Approved *bool `json:"approved,omitempty"`

	// Date Can be used to overwrite the date used by the service
	Date  *openapi_types.Date                `json:"date,omitempty"`
	Input *map[string]map[string]interface{} `json:"input,omitempty"`

	// Law Specify the law that needs to be executed
	Law string `json:"law"`

	// Output specify a requested output value
	Output     *string                 `json:"output,omitempty"`
	Parameters *map[string]interface{} `json:"parameters,omitempty"`

	// Service Specify the service that needs to be executed
	Service string `json:"service"`
}

// EvaluateResponseSchema Evaluate response
type EvaluateResponseSchema struct {
	Input map[string]interface{} `json:"input"`

	// MissingRequired Will be true when a required value is missing
	MissingRequired bool                   `json:"missingRequired"`
	Output          map[string]interface{} `json:"output"`

	// Path path node
	Path PathNode `json:"path"`

	// RequirementsMet Will be true when all requirements where met
	RequirementsMet bool `json:"requirementsMet"`

	// RulespecId Identifier of the rulespec
	RulespecId openapi_types.UUID `json:"rulespecId"`
}

// Event Event
type Event struct {
	Data map[string]interface{} `json:"data"`

	// EventType Type of the event
	EventType string    `json:"eventType"`
	Timestamp time.Time `json:"timestamp"`
}

// EventList List of all events
type EventList = []Event

// InputField defines model for InputField.
type InputField struct {
	// Description Field description
	Description string `json:"description"`

	// Name Field name
	Name string `json:"name"`

	// Required Whether the field is required
	Required         *bool            `json:"required"`
	ServiceReference ServiceReference `json:"service_reference"`
	Temporal         *Temporal        `json:"temporal,omitempty"`

	// Type Field type
	Type     string    `json:"type"`
	TypeSpec *TypeSpec `json:"type_spec,omitempty"`
}

// Law Law
type Law struct {
	// DiscoverableBy Who can discover this law
	DiscoverableBy []string `json:"discoverableBy"`

	// Name Name of the law
	Name string `json:"name"`
}

// OutputField defines model for OutputField.
type OutputField struct {
	CitizenRelevance string `json:"citizen_relevance"`

	// Description Field description
	Description string `json:"description"`

	// Name Field name
	Name string `json:"name"`

	// Required Whether the field is required
	Required *bool     `json:"required"`
	Temporal *Temporal `json:"temporal,omitempty"`

	// Type Field type
	Type     string    `json:"type"`
	TypeSpec *TypeSpec `json:"type_spec,omitempty"`
}

// Parameter defines model for Parameter.
type Parameter struct {
	// Name Parameter name
	Name string `json:"name"`

	// Reference Parameter reference
	Reference string `json:"reference"`
}

// ParameterField defines model for ParameterField.
type ParameterField = BaseField

// PathNode path node
type PathNode struct {
	Children    *[]PathNode             `json:"children,omitempty"`
	Details     *map[string]interface{} `json:"details,omitempty"`
	Name        string                  `json:"name"`
	Required    *bool                   `json:"required,omitempty"`
	ResolveType *string                 `json:"resolveType,omitempty"`
	Result      *interface{}            `json:"result,omitempty"`
	Type        string                  `json:"type"`
}

// Profile Profile
type Profile struct {
	// Bsn Burgerservicenummer of a Dutch citizen
	Bsn Bsn `json:"bsn"`

	// Description Description of the burger
	Description string `json:"description"`

	// Name Name of the burger
	Name string `json:"name"`

	// Sources All sources for a certain profile
	Sources map[string]Source `json:"sources"`
}

// ProfileList List of all burgers
type ProfileList = []Profile

// Properties defines model for Properties.
type Properties struct {
	// Applies Application rules
	Applies *[]Apply `json:"applies,omitempty"`

	// Definitions Additional definitions
	Definitions *map[string]interface{} `json:"definitions,omitempty"`

	// Input Input fields
	Input *[]InputField `json:"input,omitempty"`

	// Output Output fields
	Output *[]OutputField `json:"output,omitempty"`

	// Parameters Parameter fields
	Parameters *[]ParameterField `json:"parameters,omitempty"`

	// Sources Source fields
	Sources *[]SourceField `json:"sources,omitempty"`
}

// Reference defines model for Reference.
type Reference struct {
	// Article Article reference
	Article string `json:"article"`

	// Law Law reference
	Law string `json:"law"`

	// Url URL to the legal reference
	Url string `json:"url"`
}

// Requirement Logical requirements with AND/OR operations
type Requirement struct {
	// All All requirements must be met (AND logic)
	All *[]ActionRequirement `json:"all"`

	// Or Any requirement must be met (OR logic)
	Or *[]ActionRequirement `json:"or"`
}

// RuleSpec defines model for RuleSpec.
type RuleSpec struct {
	// Actions Actions associated with the rule
	Actions *[]Action `json:"actions,omitempty"`

	// DecisionType Type of decision
	DecisionType *string `json:"decision_type"`

	// Description Description of the rule specification
	Description string `json:"description"`

	// Discoverable Discoverability setting
	Discoverable *string `json:"discoverable"`

	// Law Associated law reference
	Law string `json:"law"`

	// LawType Type of law
	LawType *string `json:"law_type"`

	// LegalCharacter Legal character of the rule
	LegalCharacter *string `json:"legal_character"`

	// Name Name of the rule specification
	Name       string     `json:"name"`
	Properties Properties `json:"properties"`

	// References Legal references
	References *[]Reference `json:"references,omitempty"`

	// Requirements Requirements for the rule
	Requirements *[]Requirement `json:"requirements,omitempty"`

	// Service Associated service identifier
	Service string `json:"service"`

	// Uuid Unique identifier for the rule specification
	Uuid openapi_types.UUID `json:"uuid"`

	// ValidFrom Date from which the rule is valid
	ValidFrom time.Time `json:"valid_from"`
}

// SelectField defines model for SelectField.
type SelectField struct {
	// Description Field description
	Description string `json:"description"`

	// Name Field name
	Name string `json:"name"`

	// Type Field type
	Type string `json:"type"`

	// Value Represents a value in an operation (can be a primitive value or nested action)
	Value ActionValue `json:"value"`
}

// Service Service
type Service struct {
	Laws []Law `json:"laws"`

	// Name Service name
	Name string `json:"name"`
}

// ServiceList List of all services
type ServiceList = []Service

// ServiceReference defines model for ServiceReference.
type ServiceReference struct {
	// Field Field in the referenced service
	Field string `json:"field"`

	// Law Associated law
	Law string `json:"law"`

	// Parameters Service parameters
	Parameters *[]Parameter `json:"parameters,omitempty"`

	// Service Referenced service identifier
	Service string `json:"service"`
}

// Source A source
type Source map[string][]map[string]interface{}

// SourceField defines model for SourceField.
type SourceField struct {
	// Description Field description
	Description string `json:"description"`

	// Name Field name
	Name string `json:"name"`

	// Required Whether the field is required
	Required         *bool             `json:"required"`
	ServiceReference *ServiceReference `json:"service_reference,omitempty"`
	SourceReference  *SourceReference  `json:"source_reference,omitempty"`
	Temporal         *Temporal         `json:"temporal,omitempty"`

	// Type Field type
	Type     string    `json:"type"`
	TypeSpec *TypeSpec `json:"type_spec,omitempty"`
}

// SourceReference defines model for SourceReference.
type SourceReference struct {
	// Field Specific field to reference
	Field *string `json:"field"`

	// Fields Multiple fields to reference
	Fields *[]string `json:"fields"`

	// SelectOn Selection criteria
	SelectOn *[]SelectField `json:"select_on,omitempty"`

	// SourceType Type of the data source
	SourceType *string `json:"source_type,omitempty"`

	// Table Table name in the source
	Table *string `json:"table,omitempty"`
}

// Temporal defines model for Temporal.
type Temporal struct {
	// ImmutableAfter Immutability rule
	ImmutableAfter *string `json:"immutable_after"`

	// PeriodType Period type specification
	PeriodType *string `json:"period_type"`

	// Reference Reference (can be string or VariableReference)
	Reference *string `json:"reference"`

	// Type Temporal type
	Type string `json:"type"`
}

// TypeSpec defines model for TypeSpec.
type TypeSpec struct {
	// Max Maximum value
	Max *float64 `json:"max"`

	// Min Minimum value
	Min *float64 `json:"min"`

	// Precision Precision for numeric types
	Precision *int `json:"precision"`

	// Type Specific type definition
	Type string `json:"type"`

	// Unit Unit of measurement
	Unit *string `json:"unit"`
}

// Update defines model for Update.
type Update struct {
	// Mapping Field mapping configuration
	Mapping map[string]string `json:"mapping"`

	// Method Update method
	Method string `json:"method"`
}

// Bsn Burgerservicenummer of a Dutch citizen
type Bsn = string

// CaseID Identifier of a case
type CaseID = openapi_types.UUID

// ClaimID Identifier of a claim
type ClaimID = openapi_types.UUID

// DiscoverableBy DiscoverableBy is a string that can be used to filter lists
type DiscoverableBy = string

// ReferenceDate reference date
type ReferenceDate = openapi_types.Date

// PathBSN Burgerservicenummer of a Dutch citizen
type PathBSN = Bsn

// PathCaseID Identifier of a case
type PathCaseID = CaseID

// PathClaimID Identifier of a claim
type PathClaimID = ClaimID

// PathLaw defines model for pathLaw.
type PathLaw = string

// PathService defines model for pathService.
type PathService = string

// QueryDiscoverableBy DiscoverableBy is a string that can be used to filter lists
type QueryDiscoverableBy = DiscoverableBy

// QueryIncludeRejected defines model for queryIncludeRejected.
type QueryIncludeRejected = bool

// QueryLaw defines model for queryLaw.
type QueryLaw = string

// QueryOnlyApproved defines model for queryOnlyApproved.
type QueryOnlyApproved = bool

// QueryReferenceDate reference date
type QueryReferenceDate = ReferenceDate

// QueryService defines model for queryService.
type QueryService = string

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Errors []Error `json:"errors"`
}

// CaseListResponse defines model for CaseListResponse.
type CaseListResponse struct {
	// Data List of all cases
	Data CaseList `json:"data"`
}

// CaseObjectResponse defines model for CaseObjectResponse.
type CaseObjectResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

// CaseResponse defines model for CaseResponse.
type CaseResponse struct {
	// Data Case
	Data Case `json:"data"`
}

// CaseReviewResponse defines model for CaseReviewResponse.
type CaseReviewResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

// CaseSubmitResponse defines model for CaseSubmitResponse.
type CaseSubmitResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

// ClaimApproveResponse defines model for ClaimApproveResponse.
type ClaimApproveResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

// ClaimListResponse defines model for ClaimListResponse.
type ClaimListResponse struct {
	// Data List of all claims
	Data ClaimList `json:"data"`
}

// ClaimListWithKeyResponse defines model for ClaimListWithKeyResponse.
type ClaimListWithKeyResponse struct {
	Data map[string]Claim `json:"data"`
}

// ClaimRejectResponse defines model for ClaimRejectResponse.
type ClaimRejectResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

// ClaimSubmitResponse defines model for ClaimSubmitResponse.
type ClaimSubmitResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

// EvaluateResponse defines model for EvaluateResponse.
type EvaluateResponse struct {
	// Data Evaluate response
	Data EvaluateResponseSchema `json:"data"`
}

// EventListResponse defines model for EventListResponse.
type EventListResponse struct {
	// Data List of all events
	Data EventList `json:"data"`
}

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse struct {
	Errors []Error `json:"errors"`
}

// ProfileListResponse defines model for ProfileListResponse.
type ProfileListResponse struct {
	// Data List of all burgers
	Data ProfileList `json:"data"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	// Data Profile
	Data Profile `json:"data"`
}

// ResourceNotFoundErrorResponse defines model for ResourceNotFoundErrorResponse.
type ResourceNotFoundErrorResponse struct {
	Errors *[]Error `json:"errors,omitempty"`
}

// RuleSpecResponse defines model for RuleSpecResponse.
type RuleSpecResponse struct {
	Data RuleSpec `json:"data"`
}

// ServiceListResponse defines model for ServiceListResponse.
type ServiceListResponse struct {
	// Data List of all services
	Data ServiceList `json:"data"`
}

// CaseObjectRequest defines model for CaseObjectRequest.
type CaseObjectRequest struct {
	Data CaseObject `json:"data"`
}

// CaseReviewRequest defines model for CaseReviewRequest.
type CaseReviewRequest struct {
	Data CaseReview `json:"data"`
}

// CaseSubmitRequest defines model for CaseSubmitRequest.
type CaseSubmitRequest struct {
	// Data Case
	Data CaseSubmit `json:"data"`
}

// ClaimApproveRequest defines model for ClaimApproveRequest.
type ClaimApproveRequest struct {
	// Data Approve a claim
	Data ClaimApprove `json:"data"`
}

// ClaimRejectRequest defines model for ClaimRejectRequest.
type ClaimRejectRequest struct {
	// Data Reject a claim
	Data ClaimReject `json:"data"`
}

// ClaimSubmitRequest defines model for ClaimSubmitRequest.
type ClaimSubmitRequest struct {
	// Data Submit a new claim
	Data ClaimSubmit `json:"data"`
}

// DataFrameRequest defines model for DataFrameRequest.
type DataFrameRequest struct {
	Data DataFrame `json:"data"`
}

// EvaluateRequest defines model for EvaluateRequest.
type EvaluateRequest struct {
	// Data Evaluate.
	Data Evaluate `json:"data"`
}

// CaseSubmitJSONBody defines parameters for CaseSubmit.
type CaseSubmitJSONBody struct {
	// Data Case
	Data CaseSubmit `json:"data"`
}

// CaseObjectJSONBody defines parameters for CaseObject.
type CaseObjectJSONBody struct {
	Data CaseObject `json:"data"`
}

// CaseReviewJSONBody defines parameters for CaseReview.
type CaseReviewJSONBody struct {
	Data CaseReview `json:"data"`
}

// ClaimSubmitJSONBody defines parameters for ClaimSubmit.
type ClaimSubmitJSONBody struct {
	// Data Submit a new claim
	Data ClaimSubmit `json:"data"`
}

// ClaimListBasedOnBSNParams defines parameters for ClaimListBasedOnBSN.
type ClaimListBasedOnBSNParams struct {
	// Approved If added to URI only approved claims will be returned.
	Approved *QueryOnlyApproved `form:"approved,omitempty" json:"approved,omitempty"`

	// IncludeRejected If added to URI rejected claims will be added to the return
	IncludeRejected *QueryIncludeRejected `form:"includeRejected,omitempty" json:"includeRejected,omitempty"`
}

// ClaimListBasedOnBSNServiceLawParams defines parameters for ClaimListBasedOnBSNServiceLaw.
type ClaimListBasedOnBSNServiceLawParams struct {
	// Approved If added to URI only approved claims will be returned.
	Approved *QueryOnlyApproved `form:"approved,omitempty" json:"approved,omitempty"`

	// IncludeRejected If added to URI rejected claims will be added to the return
	IncludeRejected *QueryIncludeRejected `form:"includeRejected,omitempty" json:"includeRejected,omitempty"`
}

// ClaimApproveJSONBody defines parameters for ClaimApprove.
type ClaimApproveJSONBody struct {
	// Data Approve a claim
	Data ClaimApprove `json:"data"`
}

// ClaimRejectJSONBody defines parameters for ClaimReject.
type ClaimRejectJSONBody struct {
	// Data Reject a claim
	Data ClaimReject `json:"data"`
}

// ServiceLawsDiscoverableListParams defines parameters for ServiceLawsDiscoverableList.
type ServiceLawsDiscoverableListParams struct {
	// DiscoverableBy Filter for discoverable by, defaults to 'CITIZEN'
	DiscoverableBy *QueryDiscoverableBy `form:"discoverableBy,omitempty" json:"discoverableBy,omitempty"`
}

// EvaluateJSONBody defines parameters for Evaluate.
type EvaluateJSONBody struct {
	// Data Evaluate.
	Data Evaluate `json:"data"`
}

// RuleSpecGetParams defines parameters for RuleSpecGet.
type RuleSpecGetParams struct {
	// Service filter for service
	Service QueryService `form:"service" json:"service"`

	// Law filter for law
	Law QueryLaw `form:"law" json:"law"`

	// ReferenceDate reference date
	ReferenceDate QueryReferenceDate `form:"referenceDate" json:"referenceDate"`
}

// SetSourceDataFrameJSONBody defines parameters for SetSourceDataFrame.
type SetSourceDataFrameJSONBody struct {
	Data DataFrame `json:"data"`
}

// CaseSubmitJSONRequestBody defines body for CaseSubmit for application/json ContentType.
type CaseSubmitJSONRequestBody CaseSubmitJSONBody

// CaseObjectJSONRequestBody defines body for CaseObject for application/json ContentType.
type CaseObjectJSONRequestBody CaseObjectJSONBody

// CaseReviewJSONRequestBody defines body for CaseReview for application/json ContentType.
type CaseReviewJSONRequestBody CaseReviewJSONBody

// ClaimSubmitJSONRequestBody defines body for ClaimSubmit for application/json ContentType.
type ClaimSubmitJSONRequestBody ClaimSubmitJSONBody

// ClaimApproveJSONRequestBody defines body for ClaimApprove for application/json ContentType.
type ClaimApproveJSONRequestBody ClaimApproveJSONBody

// ClaimRejectJSONRequestBody defines body for ClaimReject for application/json ContentType.
type ClaimRejectJSONRequestBody ClaimRejectJSONBody

// EvaluateJSONRequestBody defines body for Evaluate for application/json ContentType.
type EvaluateJSONRequestBody EvaluateJSONBody

// SetSourceDataFrameJSONRequestBody defines body for SetSourceDataFrame for application/json ContentType.
type SetSourceDataFrameJSONRequestBody SetSourceDataFrameJSONBody

// AsRequirement returns the union data inside the ActionRequirement as a Requirement
func (t ActionRequirement) AsRequirement() (Requirement, error) {
	var body Requirement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRequirement overwrites any union data inside the ActionRequirement as the provided Requirement
func (t *ActionRequirement) FromRequirement(v Requirement) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRequirement performs a merge with any union data inside the ActionRequirement, using the provided Requirement
func (t *ActionRequirement) MergeRequirement(v Requirement) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAction returns the union data inside the ActionRequirement as a Action
func (t ActionRequirement) AsAction() (Action, error) {
	var body Action
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAction overwrites any union data inside the ActionRequirement as the provided Action
func (t *ActionRequirement) FromAction(v Action) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAction performs a merge with any union data inside the ActionRequirement, using the provided Action
func (t *ActionRequirement) MergeAction(v Action) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionRequirement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionRequirement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAction returns the union data inside the ActionValue as a Action
func (t ActionValue) AsAction() (Action, error) {
	var body Action
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAction overwrites any union data inside the ActionValue as the provided Action
func (t *ActionValue) FromAction(v Action) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAction performs a merge with any union data inside the ActionValue, using the provided Action
func (t *ActionValue) MergeAction(v Action) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionValue1 returns the union data inside the ActionValue as a ActionValue1
func (t ActionValue) AsActionValue1() (ActionValue1, error) {
	var body ActionValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionValue1 overwrites any union data inside the ActionValue as the provided ActionValue1
func (t *ActionValue) FromActionValue1(v ActionValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionValue1 performs a merge with any union data inside the ActionValue, using the provided ActionValue1
func (t *ActionValue) MergeActionValue1(v ActionValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionValues0 returns the union data inside the ActionValues as a ActionValues0
func (t ActionValues) AsActionValues0() (ActionValues0, error) {
	var body ActionValues0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionValues0 overwrites any union data inside the ActionValues as the provided ActionValues0
func (t *ActionValues) FromActionValues0(v ActionValues0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionValues0 performs a merge with any union data inside the ActionValues, using the provided ActionValues0
func (t *ActionValues) MergeActionValues0(v ActionValues0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionValues1 returns the union data inside the ActionValues as a ActionValues1
func (t ActionValues) AsActionValues1() (ActionValues1, error) {
	var body ActionValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionValues1 overwrites any union data inside the ActionValues as the provided ActionValues1
func (t *ActionValues) FromActionValues1(v ActionValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionValues1 performs a merge with any union data inside the ActionValues, using the provided ActionValues1
func (t *ActionValues) MergeActionValues1(v ActionValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionValues) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionValues) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /case)
	CaseSubmit(w http.ResponseWriter, r *http.Request)

	// (GET /case/{caseID})
	CaseGet(w http.ResponseWriter, r *http.Request, caseID PathCaseID)

	// (GET /case/{caseID}/events)
	EventListBasedOnCaseID(w http.ResponseWriter, r *http.Request, caseID PathCaseID)

	// (GET /cases/{bsn})
	CaseListBasedOnBSN(w http.ResponseWriter, r *http.Request, bsn PathBSN)

	// (GET /cases/{bsn}/{service}/{law})
	CaseBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw)
	// Object to a decision on a case
	// (POST /cases/{caseID}/object)
	CaseObject(w http.ResponseWriter, r *http.Request, caseID PathCaseID)
	// Complete a manual review for a case
	// (POST /cases/{caseID}/review)
	CaseReview(w http.ResponseWriter, r *http.Request, caseID PathCaseID)

	// (GET /cases/{service}/{law})
	CaseListBasedOnServiceLaw(w http.ResponseWriter, r *http.Request, service PathService, law PathLaw)
	// Submit a new claim
	// (POST /claims)
	ClaimSubmit(w http.ResponseWriter, r *http.Request)

	// (GET /claims/{bsn})
	ClaimListBasedOnBSN(w http.ResponseWriter, r *http.Request, bsn PathBSN, params ClaimListBasedOnBSNParams)

	// (GET /claims/{bsn}/{service}/{law})
	ClaimListBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw, params ClaimListBasedOnBSNServiceLawParams)
	// Approve a claim
	// (POST /claims/{claimId}/approve)
	ClaimApprove(w http.ResponseWriter, r *http.Request, claimId PathClaimID)
	// Reject a claim
	// (POST /claims/{claimId}/reject)
	ClaimReject(w http.ResponseWriter, r *http.Request, claimId PathClaimID)

	// (GET /discoverable-service-laws)
	ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request, params ServiceLawsDiscoverableListParams)
	// Reset the engine
	// (POST /engine/reset)
	ResetEngine(w http.ResponseWriter, r *http.Request)

	// (POST /evaluate)
	Evaluate(w http.ResponseWriter, r *http.Request)

	// (GET /events)
	EventList(w http.ResponseWriter, r *http.Request)

	// (GET /profiles)
	ProfileList(w http.ResponseWriter, r *http.Request)

	// (GET /profiles/{bsn})
	ProfileGet(w http.ResponseWriter, r *http.Request, bsn PathBSN)

	// (GET /rule-spec)
	RuleSpecGet(w http.ResponseWriter, r *http.Request, params RuleSpecGetParams)
	// Set a source data frame
	// (POST /source-dataframe)
	SetSourceDataFrame(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /case)
func (_ Unimplemented) CaseSubmit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /case/{caseID})
func (_ Unimplemented) CaseGet(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /case/{caseID}/events)
func (_ Unimplemented) EventListBasedOnCaseID(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /cases/{bsn})
func (_ Unimplemented) CaseListBasedOnBSN(w http.ResponseWriter, r *http.Request, bsn PathBSN) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /cases/{bsn}/{service}/{law})
func (_ Unimplemented) CaseBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Object to a decision on a case
// (POST /cases/{caseID}/object)
func (_ Unimplemented) CaseObject(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Complete a manual review for a case
// (POST /cases/{caseID}/review)
func (_ Unimplemented) CaseReview(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /cases/{service}/{law})
func (_ Unimplemented) CaseListBasedOnServiceLaw(w http.ResponseWriter, r *http.Request, service PathService, law PathLaw) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit a new claim
// (POST /claims)
func (_ Unimplemented) ClaimSubmit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /claims/{bsn})
func (_ Unimplemented) ClaimListBasedOnBSN(w http.ResponseWriter, r *http.Request, bsn PathBSN, params ClaimListBasedOnBSNParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /claims/{bsn}/{service}/{law})
func (_ Unimplemented) ClaimListBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw, params ClaimListBasedOnBSNServiceLawParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Approve a claim
// (POST /claims/{claimId}/approve)
func (_ Unimplemented) ClaimApprove(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reject a claim
// (POST /claims/{claimId}/reject)
func (_ Unimplemented) ClaimReject(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /discoverable-service-laws)
func (_ Unimplemented) ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request, params ServiceLawsDiscoverableListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset the engine
// (POST /engine/reset)
func (_ Unimplemented) ResetEngine(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /evaluate)
func (_ Unimplemented) Evaluate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /events)
func (_ Unimplemented) EventList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /profiles)
func (_ Unimplemented) ProfileList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /profiles/{bsn})
func (_ Unimplemented) ProfileGet(w http.ResponseWriter, r *http.Request, bsn PathBSN) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /rule-spec)
func (_ Unimplemented) RuleSpecGet(w http.ResponseWriter, r *http.Request, params RuleSpecGetParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set a source data frame
// (POST /source-dataframe)
func (_ Unimplemented) SetSourceDataFrame(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CaseSubmit operation middleware
func (siw *ServerInterfaceWrapper) CaseSubmit(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CaseGet operation middleware
func (siw *ServerInterfaceWrapper) CaseGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "caseID" -------------
	var caseID PathCaseID

	err = runtime.BindStyledParameterWithOptions("simple", "caseID", chi.URLParam(r, "caseID"), &caseID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "caseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseGet(w, r, caseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// EventListBasedOnCaseID operation middleware
func (siw *ServerInterfaceWrapper) EventListBasedOnCaseID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "caseID" -------------
	var caseID PathCaseID

	err = runtime.BindStyledParameterWithOptions("simple", "caseID", chi.URLParam(r, "caseID"), &caseID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "caseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EventListBasedOnCaseID(w, r, caseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CaseListBasedOnBSN operation middleware
func (siw *ServerInterfaceWrapper) CaseListBasedOnBSN(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseListBasedOnBSN(w, r, bsn)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CaseBasedOnBSNServiceLaw operation middleware
func (siw *ServerInterfaceWrapper) CaseBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	// ------------- Path parameter "service" -------------
	var service PathService

	err = runtime.BindStyledParameterWithOptions("simple", "service", chi.URLParam(r, "service"), &service, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Path parameter "law" -------------
	var law PathLaw

	err = runtime.BindStyledParameterWithOptions("simple", "law", chi.URLParam(r, "law"), &law, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseBasedOnBSNServiceLaw(w, r, bsn, service, law)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CaseObject operation middleware
func (siw *ServerInterfaceWrapper) CaseObject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "caseID" -------------
	var caseID PathCaseID

	err = runtime.BindStyledParameterWithOptions("simple", "caseID", chi.URLParam(r, "caseID"), &caseID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "caseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseObject(w, r, caseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CaseReview operation middleware
func (siw *ServerInterfaceWrapper) CaseReview(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "caseID" -------------
	var caseID PathCaseID

	err = runtime.BindStyledParameterWithOptions("simple", "caseID", chi.URLParam(r, "caseID"), &caseID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "caseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseReview(w, r, caseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CaseListBasedOnServiceLaw operation middleware
func (siw *ServerInterfaceWrapper) CaseListBasedOnServiceLaw(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "service" -------------
	var service PathService

	err = runtime.BindStyledParameterWithOptions("simple", "service", chi.URLParam(r, "service"), &service, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Path parameter "law" -------------
	var law PathLaw

	err = runtime.BindStyledParameterWithOptions("simple", "law", chi.URLParam(r, "law"), &law, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CaseListBasedOnServiceLaw(w, r, service, law)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimSubmit operation middleware
func (siw *ServerInterfaceWrapper) ClaimSubmit(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimSubmit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimListBasedOnBSN operation middleware
func (siw *ServerInterfaceWrapper) ClaimListBasedOnBSN(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ClaimListBasedOnBSNParams

	// ------------- Optional query parameter "approved" -------------

	err = runtime.BindQueryParameter("form", true, false, "approved", r.URL.Query(), &params.Approved)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "approved", Err: err})
		return
	}

	// ------------- Optional query parameter "includeRejected" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeRejected", r.URL.Query(), &params.IncludeRejected)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeRejected", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimListBasedOnBSN(w, r, bsn, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimListBasedOnBSNServiceLaw operation middleware
func (siw *ServerInterfaceWrapper) ClaimListBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	// ------------- Path parameter "service" -------------
	var service PathService

	err = runtime.BindStyledParameterWithOptions("simple", "service", chi.URLParam(r, "service"), &service, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Path parameter "law" -------------
	var law PathLaw

	err = runtime.BindStyledParameterWithOptions("simple", "law", chi.URLParam(r, "law"), &law, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ClaimListBasedOnBSNServiceLawParams

	// ------------- Optional query parameter "approved" -------------

	err = runtime.BindQueryParameter("form", true, false, "approved", r.URL.Query(), &params.Approved)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "approved", Err: err})
		return
	}

	// ------------- Optional query parameter "includeRejected" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeRejected", r.URL.Query(), &params.IncludeRejected)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "includeRejected", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimListBasedOnBSNServiceLaw(w, r, bsn, service, law, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimApprove operation middleware
func (siw *ServerInterfaceWrapper) ClaimApprove(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "claimId" -------------
	var claimId PathClaimID

	err = runtime.BindStyledParameterWithOptions("simple", "claimId", chi.URLParam(r, "claimId"), &claimId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "claimId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimApprove(w, r, claimId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimReject operation middleware
func (siw *ServerInterfaceWrapper) ClaimReject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "claimId" -------------
	var claimId PathClaimID

	err = runtime.BindStyledParameterWithOptions("simple", "claimId", chi.URLParam(r, "claimId"), &claimId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "claimId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimReject(w, r, claimId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ServiceLawsDiscoverableList operation middleware
func (siw *ServerInterfaceWrapper) ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceLawsDiscoverableListParams

	// ------------- Optional query parameter "discoverableBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "discoverableBy", r.URL.Query(), &params.DiscoverableBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "discoverableBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServiceLawsDiscoverableList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ResetEngine operation middleware
func (siw *ServerInterfaceWrapper) ResetEngine(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetEngine(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Evaluate operation middleware
func (siw *ServerInterfaceWrapper) Evaluate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Evaluate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// EventList operation middleware
func (siw *ServerInterfaceWrapper) EventList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EventList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProfileList operation middleware
func (siw *ServerInterfaceWrapper) ProfileList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProfileList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProfileGet operation middleware
func (siw *ServerInterfaceWrapper) ProfileGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "bsn" -------------
	var bsn PathBSN

	err = runtime.BindStyledParameterWithOptions("simple", "bsn", chi.URLParam(r, "bsn"), &bsn, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bsn", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProfileGet(w, r, bsn)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RuleSpecGet operation middleware
func (siw *ServerInterfaceWrapper) RuleSpecGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RuleSpecGetParams

	// ------------- Required query parameter "service" -------------

	if paramValue := r.URL.Query().Get("service"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "service"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "service", r.URL.Query(), &params.Service)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Required query parameter "law" -------------

	if paramValue := r.URL.Query().Get("law"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "law"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "law", r.URL.Query(), &params.Law)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "law", Err: err})
		return
	}

	// ------------- Required query parameter "referenceDate" -------------

	if paramValue := r.URL.Query().Get("referenceDate"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "referenceDate"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "referenceDate", r.URL.Query(), &params.ReferenceDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "referenceDate", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RuleSpecGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetSourceDataFrame operation middleware
func (siw *ServerInterfaceWrapper) SetSourceDataFrame(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetSourceDataFrame(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/case", wrapper.CaseSubmit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/case/{caseID}", wrapper.CaseGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/case/{caseID}/events", wrapper.EventListBasedOnCaseID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cases/{bsn}", wrapper.CaseListBasedOnBSN)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cases/{bsn}/{service}/{law}", wrapper.CaseBasedOnBSNServiceLaw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cases/{caseID}/object", wrapper.CaseObject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cases/{caseID}/review", wrapper.CaseReview)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cases/{service}/{law}", wrapper.CaseListBasedOnServiceLaw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/claims", wrapper.ClaimSubmit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/claims/{bsn}", wrapper.ClaimListBasedOnBSN)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/claims/{bsn}/{service}/{law}", wrapper.ClaimListBasedOnBSNServiceLaw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/claims/{claimId}/approve", wrapper.ClaimApprove)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/claims/{claimId}/reject", wrapper.ClaimReject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/discoverable-service-laws", wrapper.ServiceLawsDiscoverableList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/engine/reset", wrapper.ResetEngine)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/evaluate", wrapper.Evaluate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events", wrapper.EventList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profiles", wrapper.ProfileList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profiles/{bsn}", wrapper.ProfileGet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rule-spec", wrapper.RuleSpecGet)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/source-dataframe", wrapper.SetSourceDataFrame)
	})

	return r
}

type BadRequestErrorResponseJSONResponse struct {
	Errors []Error `json:"errors"`
}

type CaseListResponseJSONResponse struct {
	// Data List of all cases
	Data CaseList `json:"data"`
}

type CaseObjectResponseJSONResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

type CaseResponseJSONResponse struct {
	// Data Case
	Data Case `json:"data"`
}

type CaseReviewResponseJSONResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

type CaseSubmitResponseJSONResponse struct {
	// Data Identifier of a case
	Data CaseID `json:"data"`
}

type ClaimApproveResponseJSONResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

type ClaimListResponseJSONResponse struct {
	// Data List of all claims
	Data ClaimList `json:"data"`
}

type ClaimListWithKeyResponseJSONResponse struct {
	Data map[string]Claim `json:"data"`
}

type ClaimRejectResponseJSONResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

type ClaimSubmitResponseJSONResponse struct {
	// Data Identifier of a claim
	Data ClaimID `json:"data"`
}

type EmptyResponseResponse struct {
}

type EvaluateResponseJSONResponse struct {
	// Data Evaluate response
	Data EvaluateResponseSchema `json:"data"`
}

type EventListResponseJSONResponse struct {
	// Data List of all events
	Data EventList `json:"data"`
}

type InternalServerErrorResponseJSONResponse struct {
	Errors []Error `json:"errors"`
}

type ProfileListResponseJSONResponse struct {
	// Data List of all burgers
	Data ProfileList `json:"data"`
}

type ProfileResponseJSONResponse struct {
	// Data Profile
	Data Profile `json:"data"`
}

type ResourceNotFoundErrorResponseJSONResponse struct {
	Errors *[]Error `json:"errors,omitempty"`
}

type RuleSpecResponseJSONResponse struct {
	Data RuleSpec `json:"data"`
}

type ServiceListResponseJSONResponse struct {
	// Data List of all services
	Data ServiceList `json:"data"`
}

type CaseSubmitRequestObject struct {
	Body *CaseSubmitJSONRequestBody
}

type CaseSubmitResponseObject interface {
	VisitCaseSubmitResponse(w http.ResponseWriter) error
}

type CaseSubmit201JSONResponse struct{ CaseSubmitResponseJSONResponse }

func (response CaseSubmit201JSONResponse) VisitCaseSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CaseSubmit400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseSubmit400JSONResponse) VisitCaseSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseSubmit500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseSubmit500JSONResponse) VisitCaseSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CaseGetRequestObject struct {
	CaseID PathCaseID `json:"caseID"`
}

type CaseGetResponseObject interface {
	VisitCaseGetResponse(w http.ResponseWriter) error
}

type CaseGet200JSONResponse struct{ CaseResponseJSONResponse }

func (response CaseGet200JSONResponse) VisitCaseGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CaseGet400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseGet400JSONResponse) VisitCaseGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseGet404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response CaseGet404JSONResponse) VisitCaseGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CaseGet500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseGet500JSONResponse) VisitCaseGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type EventListBasedOnCaseIDRequestObject struct {
	CaseID PathCaseID `json:"caseID"`
}

type EventListBasedOnCaseIDResponseObject interface {
	VisitEventListBasedOnCaseIDResponse(w http.ResponseWriter) error
}

type EventListBasedOnCaseID200JSONResponse struct{ EventListResponseJSONResponse }

func (response EventListBasedOnCaseID200JSONResponse) VisitEventListBasedOnCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventListBasedOnCaseID400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response EventListBasedOnCaseID400JSONResponse) VisitEventListBasedOnCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventListBasedOnCaseID404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response EventListBasedOnCaseID404JSONResponse) VisitEventListBasedOnCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type EventListBasedOnCaseID500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response EventListBasedOnCaseID500JSONResponse) VisitEventListBasedOnCaseIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CaseListBasedOnBSNRequestObject struct {
	Bsn PathBSN `json:"bsn"`
}

type CaseListBasedOnBSNResponseObject interface {
	VisitCaseListBasedOnBSNResponse(w http.ResponseWriter) error
}

type CaseListBasedOnBSN200JSONResponse struct{ CaseListResponseJSONResponse }

func (response CaseListBasedOnBSN200JSONResponse) VisitCaseListBasedOnBSNResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CaseListBasedOnBSN400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseListBasedOnBSN400JSONResponse) VisitCaseListBasedOnBSNResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseListBasedOnBSN404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response CaseListBasedOnBSN404JSONResponse) VisitCaseListBasedOnBSNResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CaseListBasedOnBSN500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseListBasedOnBSN500JSONResponse) VisitCaseListBasedOnBSNResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CaseBasedOnBSNServiceLawRequestObject struct {
	Bsn     PathBSN     `json:"bsn"`
	Service PathService `json:"service"`
	Law     PathLaw     `json:"law"`
}

type CaseBasedOnBSNServiceLawResponseObject interface {
	VisitCaseBasedOnBSNServiceLawResponse(w http.ResponseWriter) error
}

type CaseBasedOnBSNServiceLaw200JSONResponse struct{ CaseResponseJSONResponse }

func (response CaseBasedOnBSNServiceLaw200JSONResponse) VisitCaseBasedOnBSNServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CaseBasedOnBSNServiceLaw400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseBasedOnBSNServiceLaw400JSONResponse) VisitCaseBasedOnBSNServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseBasedOnBSNServiceLaw404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response CaseBasedOnBSNServiceLaw404JSONResponse) VisitCaseBasedOnBSNServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CaseBasedOnBSNServiceLaw500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseBasedOnBSNServiceLaw500JSONResponse) VisitCaseBasedOnBSNServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CaseObjectRequestObject struct {
	CaseID PathCaseID `json:"caseID"`
	Body   *CaseObjectJSONRequestBody
}

type CaseObjectResponseObject interface {
	VisitCaseObjectResponse(w http.ResponseWriter) error
}

type CaseObject200JSONResponse struct{ CaseObjectResponseJSONResponse }

func (response CaseObject200JSONResponse) VisitCaseObjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CaseObject400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseObject400JSONResponse) VisitCaseObjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseObject404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response CaseObject404JSONResponse) VisitCaseObjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CaseObject500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseObject500JSONResponse) VisitCaseObjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CaseReviewRequestObject struct {
	CaseID PathCaseID `json:"caseID"`
	Body   *CaseReviewJSONRequestBody
}

type CaseReviewResponseObject interface {
	VisitCaseReviewResponse(w http.ResponseWriter) error
}

type CaseReview200JSONResponse struct{ CaseReviewResponseJSONResponse }

func (response CaseReview200JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CaseReview400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseReview400JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseReview404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response CaseReview404JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CaseReview500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseReview500JSONResponse) VisitCaseReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CaseListBasedOnServiceLawRequestObject struct {
	Service PathService `json:"service"`
	Law     PathLaw     `json:"law"`
}

type CaseListBasedOnServiceLawResponseObject interface {
	VisitCaseListBasedOnServiceLawResponse(w http.ResponseWriter) error
}

type CaseListBasedOnServiceLaw200JSONResponse struct{ CaseListResponseJSONResponse }

func (response CaseListBasedOnServiceLaw200JSONResponse) VisitCaseListBasedOnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CaseListBasedOnServiceLaw400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response CaseListBasedOnServiceLaw400JSONResponse) VisitCaseListBasedOnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CaseListBasedOnServiceLaw500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response CaseListBasedOnServiceLaw500JSONResponse) VisitCaseListBasedOnServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimSubmitRequestObject struct {
	Body *ClaimSubmitJSONRequestBody
}

type ClaimSubmitResponseObject interface {
	VisitClaimSubmitResponse(w http.ResponseWriter) error
}

type ClaimSubmit201JSONResponse struct {
	ClaimSubmitResponseJSONResponse
}

func (response ClaimSubmit201JSONResponse) VisitClaimSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ClaimSubmit400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimSubmit400JSONResponse) VisitClaimSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimSubmit500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimSubmit500JSONResponse) VisitClaimSubmitResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimListBasedOnBSNRequestObject struct {
	Bsn    PathBSN `json:"bsn"`
	Params ClaimListBasedOnBSNParams
}

type ClaimListBasedOnBSNResponseObject interface {
	VisitClaimListBasedOnBSNResponse(w http.ResponseWriter) error
}

type ClaimListBasedOnBSN200JSONResponse struct{ ClaimListResponseJSONResponse }

func (response ClaimListBasedOnBSN200JSONResponse) VisitClaimListBasedOnBSNResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClaimListBasedOnBSN400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimListBasedOnBSN400JSONResponse) VisitClaimListBasedOnBSNResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimListBasedOnBSN500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimListBasedOnBSN500JSONResponse) VisitClaimListBasedOnBSNResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimListBasedOnBSNServiceLawRequestObject struct {
	Bsn     PathBSN     `json:"bsn"`
	Service PathService `json:"service"`
	Law     PathLaw     `json:"law"`
	Params  ClaimListBasedOnBSNServiceLawParams
}

type ClaimListBasedOnBSNServiceLawResponseObject interface {
	VisitClaimListBasedOnBSNServiceLawResponse(w http.ResponseWriter) error
}

type ClaimListBasedOnBSNServiceLaw200JSONResponse struct {
	ClaimListWithKeyResponseJSONResponse
}

func (response ClaimListBasedOnBSNServiceLaw200JSONResponse) VisitClaimListBasedOnBSNServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClaimListBasedOnBSNServiceLaw400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimListBasedOnBSNServiceLaw400JSONResponse) VisitClaimListBasedOnBSNServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimListBasedOnBSNServiceLaw500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimListBasedOnBSNServiceLaw500JSONResponse) VisitClaimListBasedOnBSNServiceLawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApproveRequestObject struct {
	ClaimId PathClaimID `json:"claimId"`
	Body    *ClaimApproveJSONRequestBody
}

type ClaimApproveResponseObject interface {
	VisitClaimApproveResponse(w http.ResponseWriter) error
}

type ClaimApprove200JSONResponse struct {
	ClaimApproveResponseJSONResponse
}

func (response ClaimApprove200JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApprove400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimApprove400JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApprove404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response ClaimApprove404JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ClaimApprove500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimApprove500JSONResponse) VisitClaimApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimRejectRequestObject struct {
	ClaimId PathClaimID `json:"claimId"`
	Body    *ClaimRejectJSONRequestBody
}

type ClaimRejectResponseObject interface {
	VisitClaimRejectResponse(w http.ResponseWriter) error
}

type ClaimReject200JSONResponse struct {
	ClaimRejectResponseJSONResponse
}

func (response ClaimReject200JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClaimReject400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ClaimReject400JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClaimReject404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response ClaimReject404JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ClaimReject500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ClaimReject500JSONResponse) VisitClaimRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ServiceLawsDiscoverableListRequestObject struct {
	Params ServiceLawsDiscoverableListParams
}

type ServiceLawsDiscoverableListResponseObject interface {
	VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error
}

type ServiceLawsDiscoverableList200JSONResponse struct {
	ServiceListResponseJSONResponse
}

func (response ServiceLawsDiscoverableList200JSONResponse) VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ServiceLawsDiscoverableList400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ServiceLawsDiscoverableList400JSONResponse) VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ServiceLawsDiscoverableList500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ServiceLawsDiscoverableList500JSONResponse) VisitServiceLawsDiscoverableListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ResetEngineRequestObject struct {
}

type ResetEngineResponseObject interface {
	VisitResetEngineResponse(w http.ResponseWriter) error
}

type ResetEngine201Response = EmptyResponseResponse

func (response ResetEngine201Response) VisitResetEngineResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type ResetEngine400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ResetEngine400JSONResponse) VisitResetEngineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ResetEngine500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ResetEngine500JSONResponse) VisitResetEngineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type EvaluateRequestObject struct {
	Body *EvaluateJSONRequestBody
}

type EvaluateResponseObject interface {
	VisitEvaluateResponse(w http.ResponseWriter) error
}

type Evaluate201JSONResponse struct{ EvaluateResponseJSONResponse }

func (response Evaluate201JSONResponse) VisitEvaluateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type Evaluate400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response Evaluate400JSONResponse) VisitEvaluateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Evaluate500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response Evaluate500JSONResponse) VisitEvaluateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type EventListRequestObject struct {
}

type EventListResponseObject interface {
	VisitEventListResponse(w http.ResponseWriter) error
}

type EventList200JSONResponse struct{ EventListResponseJSONResponse }

func (response EventList200JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EventList400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response EventList400JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EventList500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response EventList500JSONResponse) VisitEventListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProfileListRequestObject struct {
}

type ProfileListResponseObject interface {
	VisitProfileListResponse(w http.ResponseWriter) error
}

type ProfileList200JSONResponse struct {
	ProfileListResponseJSONResponse
}

func (response ProfileList200JSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileList400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ProfileList400JSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProfileList500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ProfileList500JSONResponse) VisitProfileListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGetRequestObject struct {
	Bsn PathBSN `json:"bsn"`
}

type ProfileGetResponseObject interface {
	VisitProfileGetResponse(w http.ResponseWriter) error
}

type ProfileGet200JSONResponse struct{ ProfileResponseJSONResponse }

func (response ProfileGet200JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response ProfileGet400JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet404JSONResponse struct {
	ResourceNotFoundErrorResponseJSONResponse
}

func (response ProfileGet404JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response ProfileGet500JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RuleSpecGetRequestObject struct {
	Params RuleSpecGetParams
}

type RuleSpecGetResponseObject interface {
	VisitRuleSpecGetResponse(w http.ResponseWriter) error
}

type RuleSpecGet200JSONResponse struct{ RuleSpecResponseJSONResponse }

func (response RuleSpecGet200JSONResponse) VisitRuleSpecGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RuleSpecGet400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response RuleSpecGet400JSONResponse) VisitRuleSpecGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RuleSpecGet500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response RuleSpecGet500JSONResponse) VisitRuleSpecGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SetSourceDataFrameRequestObject struct {
	Body *SetSourceDataFrameJSONRequestBody
}

type SetSourceDataFrameResponseObject interface {
	VisitSetSourceDataFrameResponse(w http.ResponseWriter) error
}

type SetSourceDataFrame201Response = EmptyResponseResponse

func (response SetSourceDataFrame201Response) VisitSetSourceDataFrameResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type SetSourceDataFrame400JSONResponse struct {
	BadRequestErrorResponseJSONResponse
}

func (response SetSourceDataFrame400JSONResponse) VisitSetSourceDataFrameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetSourceDataFrame500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response SetSourceDataFrame500JSONResponse) VisitSetSourceDataFrameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /case)
	CaseSubmit(ctx context.Context, request CaseSubmitRequestObject) (CaseSubmitResponseObject, error)

	// (GET /case/{caseID})
	CaseGet(ctx context.Context, request CaseGetRequestObject) (CaseGetResponseObject, error)

	// (GET /case/{caseID}/events)
	EventListBasedOnCaseID(ctx context.Context, request EventListBasedOnCaseIDRequestObject) (EventListBasedOnCaseIDResponseObject, error)

	// (GET /cases/{bsn})
	CaseListBasedOnBSN(ctx context.Context, request CaseListBasedOnBSNRequestObject) (CaseListBasedOnBSNResponseObject, error)

	// (GET /cases/{bsn}/{service}/{law})
	CaseBasedOnBSNServiceLaw(ctx context.Context, request CaseBasedOnBSNServiceLawRequestObject) (CaseBasedOnBSNServiceLawResponseObject, error)
	// Object to a decision on a case
	// (POST /cases/{caseID}/object)
	CaseObject(ctx context.Context, request CaseObjectRequestObject) (CaseObjectResponseObject, error)
	// Complete a manual review for a case
	// (POST /cases/{caseID}/review)
	CaseReview(ctx context.Context, request CaseReviewRequestObject) (CaseReviewResponseObject, error)

	// (GET /cases/{service}/{law})
	CaseListBasedOnServiceLaw(ctx context.Context, request CaseListBasedOnServiceLawRequestObject) (CaseListBasedOnServiceLawResponseObject, error)
	// Submit a new claim
	// (POST /claims)
	ClaimSubmit(ctx context.Context, request ClaimSubmitRequestObject) (ClaimSubmitResponseObject, error)

	// (GET /claims/{bsn})
	ClaimListBasedOnBSN(ctx context.Context, request ClaimListBasedOnBSNRequestObject) (ClaimListBasedOnBSNResponseObject, error)

	// (GET /claims/{bsn}/{service}/{law})
	ClaimListBasedOnBSNServiceLaw(ctx context.Context, request ClaimListBasedOnBSNServiceLawRequestObject) (ClaimListBasedOnBSNServiceLawResponseObject, error)
	// Approve a claim
	// (POST /claims/{claimId}/approve)
	ClaimApprove(ctx context.Context, request ClaimApproveRequestObject) (ClaimApproveResponseObject, error)
	// Reject a claim
	// (POST /claims/{claimId}/reject)
	ClaimReject(ctx context.Context, request ClaimRejectRequestObject) (ClaimRejectResponseObject, error)

	// (GET /discoverable-service-laws)
	ServiceLawsDiscoverableList(ctx context.Context, request ServiceLawsDiscoverableListRequestObject) (ServiceLawsDiscoverableListResponseObject, error)
	// Reset the engine
	// (POST /engine/reset)
	ResetEngine(ctx context.Context, request ResetEngineRequestObject) (ResetEngineResponseObject, error)

	// (POST /evaluate)
	Evaluate(ctx context.Context, request EvaluateRequestObject) (EvaluateResponseObject, error)

	// (GET /events)
	EventList(ctx context.Context, request EventListRequestObject) (EventListResponseObject, error)

	// (GET /profiles)
	ProfileList(ctx context.Context, request ProfileListRequestObject) (ProfileListResponseObject, error)

	// (GET /profiles/{bsn})
	ProfileGet(ctx context.Context, request ProfileGetRequestObject) (ProfileGetResponseObject, error)

	// (GET /rule-spec)
	RuleSpecGet(ctx context.Context, request RuleSpecGetRequestObject) (RuleSpecGetResponseObject, error)
	// Set a source data frame
	// (POST /source-dataframe)
	SetSourceDataFrame(ctx context.Context, request SetSourceDataFrameRequestObject) (SetSourceDataFrameResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CaseSubmit operation middleware
func (sh *strictHandler) CaseSubmit(w http.ResponseWriter, r *http.Request) {
	var request CaseSubmitRequestObject

	var body CaseSubmitJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseSubmit(ctx, request.(CaseSubmitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseSubmit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseSubmitResponseObject); ok {
		if err := validResponse.VisitCaseSubmitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CaseGet operation middleware
func (sh *strictHandler) CaseGet(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	var request CaseGetRequestObject

	request.CaseID = caseID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseGet(ctx, request.(CaseGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseGetResponseObject); ok {
		if err := validResponse.VisitCaseGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// EventListBasedOnCaseID operation middleware
func (sh *strictHandler) EventListBasedOnCaseID(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	var request EventListBasedOnCaseIDRequestObject

	request.CaseID = caseID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EventListBasedOnCaseID(ctx, request.(EventListBasedOnCaseIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventListBasedOnCaseID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EventListBasedOnCaseIDResponseObject); ok {
		if err := validResponse.VisitEventListBasedOnCaseIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CaseListBasedOnBSN operation middleware
func (sh *strictHandler) CaseListBasedOnBSN(w http.ResponseWriter, r *http.Request, bsn PathBSN) {
	var request CaseListBasedOnBSNRequestObject

	request.Bsn = bsn

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseListBasedOnBSN(ctx, request.(CaseListBasedOnBSNRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseListBasedOnBSN")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseListBasedOnBSNResponseObject); ok {
		if err := validResponse.VisitCaseListBasedOnBSNResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CaseBasedOnBSNServiceLaw operation middleware
func (sh *strictHandler) CaseBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw) {
	var request CaseBasedOnBSNServiceLawRequestObject

	request.Bsn = bsn
	request.Service = service
	request.Law = law

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseBasedOnBSNServiceLaw(ctx, request.(CaseBasedOnBSNServiceLawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseBasedOnBSNServiceLaw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseBasedOnBSNServiceLawResponseObject); ok {
		if err := validResponse.VisitCaseBasedOnBSNServiceLawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CaseObject operation middleware
func (sh *strictHandler) CaseObject(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	var request CaseObjectRequestObject

	request.CaseID = caseID

	var body CaseObjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseObject(ctx, request.(CaseObjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseObject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseObjectResponseObject); ok {
		if err := validResponse.VisitCaseObjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CaseReview operation middleware
func (sh *strictHandler) CaseReview(w http.ResponseWriter, r *http.Request, caseID PathCaseID) {
	var request CaseReviewRequestObject

	request.CaseID = caseID

	var body CaseReviewJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseReview(ctx, request.(CaseReviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseReview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseReviewResponseObject); ok {
		if err := validResponse.VisitCaseReviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CaseListBasedOnServiceLaw operation middleware
func (sh *strictHandler) CaseListBasedOnServiceLaw(w http.ResponseWriter, r *http.Request, service PathService, law PathLaw) {
	var request CaseListBasedOnServiceLawRequestObject

	request.Service = service
	request.Law = law

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CaseListBasedOnServiceLaw(ctx, request.(CaseListBasedOnServiceLawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CaseListBasedOnServiceLaw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CaseListBasedOnServiceLawResponseObject); ok {
		if err := validResponse.VisitCaseListBasedOnServiceLawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimSubmit operation middleware
func (sh *strictHandler) ClaimSubmit(w http.ResponseWriter, r *http.Request) {
	var request ClaimSubmitRequestObject

	var body ClaimSubmitJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimSubmit(ctx, request.(ClaimSubmitRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimSubmit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimSubmitResponseObject); ok {
		if err := validResponse.VisitClaimSubmitResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimListBasedOnBSN operation middleware
func (sh *strictHandler) ClaimListBasedOnBSN(w http.ResponseWriter, r *http.Request, bsn PathBSN, params ClaimListBasedOnBSNParams) {
	var request ClaimListBasedOnBSNRequestObject

	request.Bsn = bsn
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimListBasedOnBSN(ctx, request.(ClaimListBasedOnBSNRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimListBasedOnBSN")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimListBasedOnBSNResponseObject); ok {
		if err := validResponse.VisitClaimListBasedOnBSNResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimListBasedOnBSNServiceLaw operation middleware
func (sh *strictHandler) ClaimListBasedOnBSNServiceLaw(w http.ResponseWriter, r *http.Request, bsn PathBSN, service PathService, law PathLaw, params ClaimListBasedOnBSNServiceLawParams) {
	var request ClaimListBasedOnBSNServiceLawRequestObject

	request.Bsn = bsn
	request.Service = service
	request.Law = law
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimListBasedOnBSNServiceLaw(ctx, request.(ClaimListBasedOnBSNServiceLawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimListBasedOnBSNServiceLaw")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimListBasedOnBSNServiceLawResponseObject); ok {
		if err := validResponse.VisitClaimListBasedOnBSNServiceLawResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimApprove operation middleware
func (sh *strictHandler) ClaimApprove(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	var request ClaimApproveRequestObject

	request.ClaimId = claimId

	var body ClaimApproveJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimApprove(ctx, request.(ClaimApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimApprove")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimApproveResponseObject); ok {
		if err := validResponse.VisitClaimApproveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimReject operation middleware
func (sh *strictHandler) ClaimReject(w http.ResponseWriter, r *http.Request, claimId PathClaimID) {
	var request ClaimRejectRequestObject

	request.ClaimId = claimId

	var body ClaimRejectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimReject(ctx, request.(ClaimRejectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimReject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimRejectResponseObject); ok {
		if err := validResponse.VisitClaimRejectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ServiceLawsDiscoverableList operation middleware
func (sh *strictHandler) ServiceLawsDiscoverableList(w http.ResponseWriter, r *http.Request, params ServiceLawsDiscoverableListParams) {
	var request ServiceLawsDiscoverableListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ServiceLawsDiscoverableList(ctx, request.(ServiceLawsDiscoverableListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ServiceLawsDiscoverableList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ServiceLawsDiscoverableListResponseObject); ok {
		if err := validResponse.VisitServiceLawsDiscoverableListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ResetEngine operation middleware
func (sh *strictHandler) ResetEngine(w http.ResponseWriter, r *http.Request) {
	var request ResetEngineRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ResetEngine(ctx, request.(ResetEngineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResetEngine")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ResetEngineResponseObject); ok {
		if err := validResponse.VisitResetEngineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Evaluate operation middleware
func (sh *strictHandler) Evaluate(w http.ResponseWriter, r *http.Request) {
	var request EvaluateRequestObject

	var body EvaluateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Evaluate(ctx, request.(EvaluateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Evaluate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EvaluateResponseObject); ok {
		if err := validResponse.VisitEvaluateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// EventList operation middleware
func (sh *strictHandler) EventList(w http.ResponseWriter, r *http.Request) {
	var request EventListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EventList(ctx, request.(EventListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EventList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EventListResponseObject); ok {
		if err := validResponse.VisitEventListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProfileList operation middleware
func (sh *strictHandler) ProfileList(w http.ResponseWriter, r *http.Request) {
	var request ProfileListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileList(ctx, request.(ProfileListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProfileListResponseObject); ok {
		if err := validResponse.VisitProfileListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProfileGet operation middleware
func (sh *strictHandler) ProfileGet(w http.ResponseWriter, r *http.Request, bsn PathBSN) {
	var request ProfileGetRequestObject

	request.Bsn = bsn

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileGet(ctx, request.(ProfileGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProfileGetResponseObject); ok {
		if err := validResponse.VisitProfileGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RuleSpecGet operation middleware
func (sh *strictHandler) RuleSpecGet(w http.ResponseWriter, r *http.Request, params RuleSpecGetParams) {
	var request RuleSpecGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RuleSpecGet(ctx, request.(RuleSpecGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RuleSpecGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RuleSpecGetResponseObject); ok {
		if err := validResponse.VisitRuleSpecGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetSourceDataFrame operation middleware
func (sh *strictHandler) SetSourceDataFrame(w http.ResponseWriter, r *http.Request) {
	var request SetSourceDataFrameRequestObject

	var body SetSourceDataFrameJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetSourceDataFrame(ctx, request.(SetSourceDataFrameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetSourceDataFrame")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetSourceDataFrameResponseObject); ok {
		if err := validResponse.VisitSetSourceDataFrameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
